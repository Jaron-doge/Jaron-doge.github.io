<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-09-23T12:27:18.530Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jaron</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python function</title>
    <link href="http://yoursite.com/2023/09/25/Python/python%20function/"/>
    <id>http://yoursite.com/2023/09/25/Python/python%20function/</id>
    <published>2023-09-24T16:00:00.000Z</published>
    <updated>2023-09-23T12:27:18.530Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="python-function"><a class="markdownIt-Anchor" href="#python-function"></a> python function</h2><h3 id="pyplot"><a class="markdownIt-Anchor" href="#pyplot"></a> pyplot</h3><a id="more"></a><ul><li><p>scatter用于绘制点</p></li><li><p>legand用于是给图像加图例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loc = <span class="string">"best/upper right/lower right"</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plot the data points</span></span><br><span class="line">plt.scatter(x_train, y_train, marker=<span class="string">'x'</span>, c=<span class="string">'r'</span>)</span><br><span class="line"><span class="comment"># Set the title</span></span><br><span class="line">plt.title(<span class="string">"Housing Prices"</span>)</span><br><span class="line"><span class="comment"># Set the y-axis label</span></span><br><span class="line">plt.ylabel(<span class="string">'Price (in 1000s of dollars)'</span>)</span><br><span class="line"><span class="comment"># Set the x-axis label</span></span><br><span class="line">plt.xlabel(<span class="string">'Size (1000 sqft)'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li><p><code>set_xlim</code>、<code>set_ylim</code></p><p>横纵坐标范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_ylim(<span class="number">-0.5</span>, <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>set_axis_off</code></p><p>隐藏坐标轴</p></li><li><p><code>subplot</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 1:</span></span><br><span class="line">xpoints = np.array([<span class="number">0</span>, <span class="number">6</span>])</span><br><span class="line">ypoints = np.array([<span class="number">0</span>, <span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(xpoints,ypoints)</span><br><span class="line">plt.title(<span class="string">"plot 1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot 2:</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.title(<span class="string">"plot 2"</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">"RUNOOB subplot Test"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>close</p><p>关闭窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.close(<span class="string">'all'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>tolist</code></p><p>将数组转化为列表</p></li><li><p><code>tight_layout</code></p><p>自动调整子图的布局</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">plt.tight_layout(pad=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="numpy"><a class="markdownIt-Anchor" href="#numpy"></a> numpy</h3><ul><li><p>创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.zeros(<span class="number">4</span>);              </span><br><span class="line">a = np.zeros((<span class="number">4</span>,));             <span class="comment"># 多维数组</span></span><br><span class="line">a = np.random.random_sample(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>slice</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">1</span>];</span><br><span class="line">a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">1</span>] =  [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br></pre></td></tr></table></figure></li><li><p>dot</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x = \sum_{i=0}^{n-1} a_i b_i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = np.dot(a, b)</span><br></pre></td></tr></table></figure></li><li><p>reshape</p><p>-1 参数告诉例程在给定数组大小和列数的情况下计算行数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>);  <span class="comment"># (3, 2)</span></span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>, <span class="number">2</span>);<span class="comment"># (3, 2)</span></span><br></pre></td></tr></table></figure></li><li><p>set_printoptions</p><p>np.set_printoptions()用于控制Python中小数的显示精度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.set_printoptions(precision=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p>np.c_</p><p>数组按列拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.c_[np.array[<span class="number">1</span>,<span class="number">2</span>], np.array[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">print([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure></li><li><p><code>np.tile</code></p><p>在给定的维度上重复数组或重复矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mat = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">np.tile(mat, (<span class="number">2</span>, <span class="number">3</span>))<span class="comment"># 行重复2次，列重复3次</span></span><br></pre></td></tr></table></figure></li><li><p><code>np.zeros_like</code></p><p>创建一个与给定数组的形状和数据类型相同的全零数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yhat = np.zeros_like(predictions)</span><br></pre></td></tr></table></figure></li><li><p><code>np.matmul</code></p><p>矩阵相乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_out = g(np.matmul(a_in,W) + b)</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code></p><p>对多维数组进行展开，并以一维的形式返回其中的元素</p></li><li><p><code>np.argmax</code></p><p>用于在数组或张量中找到最大元素的索引</p><ul><li>通过指定 <code>axis</code> 参数来选择特定的维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">max_index = np.argmax(arr)<span class="comment"># [0, 0]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="scikit-learn"><a class="markdownIt-Anchor" href="#scikit-learn"></a> Scikit-Learn</h3><ul><li><p>回归流程</p><ul><li><p>加载数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dlblue = <span class="string">'#0096ff'</span>; dlorange = <span class="string">'#FF9300'</span>; dldarkred=<span class="string">'#C00000'</span>; dlmagenta=<span class="string">'#FF40FF'</span>; dlpurple=<span class="string">'#7030A0'</span>;</span><br><span class="line">X_train, y_train = load_data()</span><br></pre></td></tr></table></figure></li><li><p>标准化训练数据  StadardScaler()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scaler = StandardScaler()</span><br><span class="line">X_norm = scaler.fit_transform(X_train)</span><br></pre></td></tr></table></figure></li><li><p>创建并拟合回归模型    SGDRegressor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sgdr = SGDRegressor(max_iter=<span class="number">1000</span>)</span><br><span class="line">sgdr.fit(X_norm, y_train)</span><br><span class="line">print(迭代次数：sgdr.n_iter_, 权重更新次数：sgdr.t_)</span><br></pre></td></tr></table></figure></li><li><p>查看参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b_norm = sgdr.intercept_</span><br><span class="line">w_norm = sgdr.coef_</span><br><span class="line">print(<span class="string">f"model parameters:                   w: <span class="subst">&#123;w_norm&#125;</span>, b:<span class="subst">&#123;b_norm&#125;</span>"</span>)</span><br></pre></td></tr></table></figure></li><li><p>进行预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y_pred_sgd = sgdr.predict(X_norm)</span><br><span class="line">y_pred = np.dot(X_norm, w_norm) + b_norm  </span><br><span class="line"><span class="comment"># y_pred == y_pred_sgd.all()    True</span></span><br></pre></td></tr></table></figure></li><li><p>绘制结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plot predictions and targets vs original features    </span></span><br><span class="line">fig,ax=plt.subplots(<span class="number">1</span>,<span class="number">4</span>,figsize=(<span class="number">12</span>,<span class="number">3</span>),sharey=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ax)):</span><br><span class="line">    ax[i].scatter(X_train[:,i],y_train, label = <span class="string">'target'</span>)</span><br><span class="line">    ax[i].set_xlabel(X_features[i])</span><br><span class="line">    ax[i].scatter(X_train[:,i],y_pred,color=dlorange, label = <span class="string">'predict'</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">"Price"</span>); ax[<span class="number">0</span>].legend();</span><br><span class="line">fig.suptitle(<span class="string">"target versus prediction using z-score normalized model"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>LogisticRegression()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lr_model = LogisticRegression()</span><br><span class="line">lr_model.fit(X, y)</span><br><span class="line">y_pred = lr_model.predict(X)</span><br><span class="line">y_socre = lr_model.score(X, y)</span><br></pre></td></tr></table></figure></li></ul><h3 id="tensorflow"><a class="markdownIt-Anchor" href="#tensorflow"></a> Tensorflow</h3><ul><li><p><code>Dense</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer_1 = Dense(units=<span class="number">1</span>, activation = <span class="string">'linear'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>set_weights</code></p><p>设置权重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear_layer.set_weights([set_w, set_b])</span><br></pre></td></tr></table></figure></li><li><p><code>tf.random.set_seed</code></p><p>设置随机数种子，确保实验的可重复性</p></li><li><p><code>Sequential</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential([</span><br><span class="line">    tf.keras.Input(shape=(<span class="number">400</span>,)),</span><br><span class="line">    layer_1, </span><br><span class="line">    layer_2</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li><p><code>model.compile</code></p><p>编译模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dense(units=<span class="number">10</span>, activation=<span class="string">'linear'</span>)</span><br><span class="line">model.compile(loss = ParseCategoricalCrossentropy(from_logits = <span class="literal">True</span>))</span><br></pre></td></tr></table></figure><ul><li>from_logits为了避免数值稳定性或优化问题。Logits 是模型在最后一层的线性输出，如果=True，则表示模型的输出是未经过 Softmax 函数的 logits。</li><li>最后一层需要是linear</li></ul></li><li><p><code>model.summary()</code></p><p>显示模型中的层数和参数数量。</p></li><li><p><code>model.fit</code></p><p>训练</p></li><li><p><code>model.predict</code></p><p>预测</p></li><li></li></ul><h3 id="sklearn"><a class="markdownIt-Anchor" href="#sklearn"></a> sklearn</h3><ul><li><p><code>make_blobs</code></p><p>生成多个高斯分布形状的聚类簇</p><ul><li><code>n_samples</code>：生成样本的总数。</li><li><code>n_features</code>：生成样本的特征数。</li><li><code>centers</code>：聚类簇的个数。</li><li><code>cluster_std</code>：每个聚类簇中的样本的标准差。</li><li><code>random_state</code>：随机数种子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train, y_train = make_blobs(n_samples=<span class="number">100</span>, centers=centers, cluster_std=<span class="number">1.0</span>,random_state=<span class="number">30</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>train_test_split</code></p><p>将数据集划分为训练集和测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-function&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-function&quot;&gt;&lt;/a&gt; python function&lt;/h2&gt;
&lt;h3 id=&quot;pyplot&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pyplot&quot;&gt;&lt;/a&gt; pyplot&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>python 语法</title>
    <link href="http://yoursite.com/2023/09/24/Python/python%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2023/09/24/Python/python%20%E8%AF%AD%E6%B3%95/</id>
    <published>2023-09-23T16:00:00.000Z</published>
    <updated>2023-09-23T12:27:16.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="python-语法"><a class="markdownIt-Anchor" href="#python-语法"></a> python 语法</h2><h3 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h3><a id="more"></a><ul><li><p>如果在循环体中不需要用到自定义变量，用_替代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br></pre></td></tr></table></figure></li></ul><h3 id="io"><a class="markdownIt-Anchor" href="#io"></a> IO</h3><ul><li><p>格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'My name is %s, my age is %d'</span> % (name, age))</span><br><span class="line">print(<span class="string">"hello,&#123;&#125;,you are &#123;&#125;"</span>.format(name,age))</span><br><span class="line">print(<span class="string">f"hello,<span class="subst">&#123;name&#125;</span>,you are <span class="subst">&#123;age:<span class="number">.2</span>f&#125;</span>"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><ul><li><p>布尔数组可以作为索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pos = y_train == <span class="number">1</span></span><br><span class="line">print(x_train[pos])</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h3><ul><li><p><code>bin</code>转二进制，bin[2:]是二进制字符串</p></li><li><p><code>map(function, list)</code></p><p>用于将函数function应用到每个list中的元素中</p></li><li><p><code>Optional</code> 不是一个内置的关键字或数据类型，而是一个由第三方库提供的类型提示工具，用于表示一个值可以是某种类型的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(name: Optional[str])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">"Hello!"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>set</code>用于将可迭代对象（如列表、元组、字符串等）转换为集合</p></li><li><p><code>all</code>判断可迭代对象（如列表、元组、集合、字典等）中的所有元素是否为真</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all(list1.count(i) &lt;= list2.count(i) <span class="keyword">for</span> i <span class="keyword">in</span> set(list2))</span><br></pre></td></tr></table></figure></li><li><p><code>enumerate</code></p><p>将一个可迭代对象组合为一个索引序列，同时返回索引和对应元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,ax <span class="keyword">in</span> enumerate(axes.flat):</span><br></pre></td></tr></table></figure></li></ul><h3 id="新版本特性"><a class="markdownIt-Anchor" href="#新版本特性"></a> 新版本特性</h3><ul><li><p>海象运算符(walrus operator)<code> :=</code></p><p>允许在表达式中同时进行赋值操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n := len(list)) &gt; <span class="number">10</span>:</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python-语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-语法&quot;&gt;&lt;/a&gt; python 语法&lt;/h2&gt;
&lt;h3 id=&quot;循环&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#循环&quot;&gt;&lt;/a&gt; 循环&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>5 EL 表达式 JSTL 标签库</title>
    <link href="http://yoursite.com/2021/09/05/JAVA%20EE/EL&amp;JSTL/"/>
    <id>http://yoursite.com/2021/09/05/JAVA%20EE/EL&amp;JSTL/</id>
    <published>2021-09-04T16:00:00.000Z</published>
    <updated>2021-09-12T07:20:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="el-表达式-jstl-标签库"><a class="markdownIt-Anchor" href="#el-表达式-jstl-标签库"></a> EL 表达式 &amp; JSTL 标签库</h2><h3 id="1-el-表达式"><a class="markdownIt-Anchor" href="#1-el-表达式"></a> 1. EL 表达式</h3><a id="more"></a><p>EL 表达式的全称是：Expression Language。是表达式语言。</p><p>EL 表达式的什么作用：EL 表达式主要是代替jsp 页面中的表达式脚本在jsp 页面中进行数据的输出。因为EL 表达式在输出数据的时候，要比jsp 的表达式脚本要简洁很多。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    request.setAttribute(<span class="string">"key"</span>,<span class="string">"值"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    表达式脚本输出key 的值是：</span><br><span class="line"> &lt;%=request.getAttribute(<span class="string">"key1"</span>)==<span class="keyword">null</span>?<span class="string">""</span>:request.getAttribute(<span class="string">"key1"</span>)%&gt;&lt;br/&gt;</span><br><span class="line">    EL 表达式输出key 的值是：$&#123;key1&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>EL 表达式的格式是：${表达式}<br />EL 表达式在输出null 值的时候，输出的是空串。jsp 表达式脚本输出null 值的时候，输出的是null 字符串。</p><h4 id="11-el-表达式搜索域数据的顺序"><a class="markdownIt-Anchor" href="#11-el-表达式搜索域数据的顺序"></a> 1.1 EL 表达式搜索域数据的顺序</h4><p>EL 表达式主要是在jsp 页面中输出数据。<br />主要是输出域对象中的数据。</p><p>当四个域中都有相同的key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    <span class="comment">//往四个域中都保存了相同的key 的数据。</span></span><br><span class="line">    request.setAttribute(<span class="string">"key"</span>, <span class="string">"request"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"key"</span>, <span class="string">"session"</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"key"</span>, <span class="string">"application"</span>);</span><br><span class="line">    pageContext.setAttribute(<span class="string">"key"</span>, <span class="string">"pageContext"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123; key &#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="12-el-表达式输出类的属性"><a class="markdownIt-Anchor" href="#12-el-表达式输出类的属性"></a> 1.2 EL 表达式输出类的属性</h4><p>​EL会找get方法进行调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    输出Person：$&#123; p &#125;&lt;br/&gt;</span><br><span class="line">    输出Person 的name 属性：$&#123;p.name&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的pnones 数组属性值：$&#123;p.phones[<span class="number">2</span>]&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的cities 集合中的元素值：$&#123;p.cities&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的List 集合中个别元素值：$&#123;p.cities[<span class="number">2</span>]&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的Map 集合: $&#123;p.map&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的Map 集合中某个key 的值: $&#123;p.map.key3&#125; &lt;br&gt;</span><br><span class="line">    输出Person 的age 属性：$&#123;p.age&#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="13-el-表达式运算"><a class="markdownIt-Anchor" href="#13-el-表达式运算"></a> 1.3 EL 表达式运算</h4><p>语法：${ 运算表达式} ， EL 表达式支持如下运算符：</p><p><strong>1. 关系运算</strong></p><p><img src="https://i.loli.net/2021/09/10/xiX2FQYyhvDg7Ib.png" alt="1.png" /></p><p><strong>2. 逻辑运算</strong></p><p><img src="https://i.loli.net/2021/09/10/DMxi8g2IXQvfc3E.png" alt="2.png" /></p><p><strong>3. 算术运算</strong></p><p><img src="https://i.loli.net/2021/09/10/7BxNUJsERF6V3kq.png" alt="3.png" /></p><p><strong>4. empty运算</strong></p><p>empty 运算可以判断一个数据是否为空，如果为空，则输出true,不为空输出false。</p><p>以下几种情况为空：<br />1、值为null 值的时候，为空<br />2、值为空串的时候，为空<br />3、值是Object 类型数组，长度为零的时候<br />4、list 集合，元素个数为零<br />5、map 集合，元素个数为零</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">// 1、值为null 值的时候，为空</span></span><br><span class="line">        request.setAttribute(<span class="string">"emptyNull"</span>, <span class="keyword">null</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123; empty emptyNull &#125; &lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>5. “.”点运算和[] 中括号运算符</strong></p><p>.点运算，可以输出Bean 对象中某个属性的值。</p><p>[]中括号运算，可以输出map 集合中key 里含有特殊字符的key 的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">"a.a.a"</span>, <span class="string">"aaaValue"</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123; map[<span class="string">'a.a.a'</span>] &#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="14-el-表达式的11个隐含对象"><a class="markdownIt-Anchor" href="#14-el-表达式的11个隐含对象"></a> 1.4 EL 表达式的11个隐含对象</h4><p>EL 个达式中11 个隐含对象，是EL 表达式中自己定义的，可以直接使用。</p><p><img src="https://i.loli.net/2021/09/10/2fC3sBOZXVuQtIY.png" alt="4.png" /></p><h4 id="141-el-获取四个特定域中的属性"><a class="markdownIt-Anchor" href="#141-el-获取四个特定域中的属性"></a> 1.4.1 EL 获取四个特定域中的属性</h4><p><img src="https://i.loli.net/2021/09/10/nNQtc4lSB9dHCJ5.png" alt="5.png" /></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">"key1"</span>, <span class="string">"pageContext1"</span>);</span><br><span class="line">        pageContext.setAttribute(<span class="string">"key2"</span>, <span class="string">"pageContext2"</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"key2"</span>, <span class="string">"request"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"key2"</span>, <span class="string">"session"</span>);</span><br><span class="line">        application.setAttribute(<span class="string">"key2"</span>, <span class="string">"application"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    $&#123; applicationScope.key2 &#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="142-pagecontext-对象的使用"><a class="markdownIt-Anchor" href="#142-pagecontext-对象的使用"></a> 1.4.2 pageContext 对象的使用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"req"</span>, request);</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;%=request.getScheme() %&gt; &lt;br&gt;</span><br><span class="line">    <span class="number">1</span>.协议： $&#123; req.scheme &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">2</span>.服务器ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">3</span>.服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">4</span>.获取工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">5</span>.获取请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">6</span>.获取客户端ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;</span><br><span class="line">    <span class="number">7</span>.获取会话的id 编号：$&#123; pageContext.session.id &#125;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="143-el-表达式其他隐含对象的使用"><a class="markdownIt-Anchor" href="#143-el-表达式其他隐含对象的使用"></a> 1.4.3 EL 表达式其他隐含对象的使用</h4><p><strong>param、paramValues</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出请求参数username 的值：$&#123; param.username &#125; &lt;br&gt;</span><br><span class="line">输出请求参数password 的值：$&#123; param.password &#125; &lt;br</span><br><span class="line">                                          </span><br><span class="line">输出请求参数username 的值：$&#123; paramValues.username[<span class="number">0</span>]&#125;&lt;br&gt;</span><br><span class="line">输出请求参数hobby 的值：$&#123; paramValues.hobby[<span class="number">0</span>] &#125; &lt;br&gt;</span><br><span class="line">输出请求参数hobby 的值：$&#123; paramValues.hobby[<span class="number">1</span>] &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>header、headerValues</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出请求头【User-Agent】的值：$&#123; header[<span class="string">'User-Agent'</span>] &#125; &lt;br&gt;</span><br><span class="line">输出请求头【Connection】的值：$&#123; header.Connection &#125; &lt;br&gt;</span><br><span class="line">输出请求头【User-Agent】的值：$&#123; headerValues[<span class="string">'User-Agent'</span>][<span class="number">0</span>] &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>cookie</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取Cookie 的名称：$&#123; cookie.JSESSIONID.name &#125; &lt;br&gt;</span><br><span class="line">获取Cookie 的值：$&#123; cookie.JSESSIONID.value &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>initParam</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出&amp;lt;Context-param&amp;gt;username 的值：$&#123; initParam.username &#125; &lt;br&gt;</span><br><span class="line">输出&amp;lt;Context-param&amp;gt;url 的值：$&#123; initParam.url &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><p>web.xml的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-jstl-标签库"><a class="markdownIt-Anchor" href="#2-jstl-标签库"></a> 2. JSTL 标签库</h3><p>JSTL 标签库全称是指JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的JSP 标签库。<br />EL 表达式主要是为了替换jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个jsp 页面变得更佳简洁</p><h4 id="21-jstl-介绍"><a class="markdownIt-Anchor" href="#21-jstl-介绍"></a> 2.1 JSTL 介绍</h4><p>JSTL由五个不同功能的标签库组成。</p><p><img src="https://i.loli.net/2021/09/10/HjJF74Dez9LOUAo.png" alt="6.png" /></p><p>在jsp标签库中使用taglib 指令引入标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CORE 标签库</span></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"><span class="comment">// XML 标签库</span></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"x"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/xml"</span> %&gt;</span><br><span class="line"><span class="comment">// FMT 标签库</span></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br><span class="line"><span class="comment">// SQL 标签库</span></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"sql"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> %&gt;</span><br><span class="line"><span class="comment">// FUNCTIONS 标签库</span></span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></table></figure><h4 id="22-jstl-标签库的使用步骤"><a class="markdownIt-Anchor" href="#22-jstl-标签库的使用步骤"></a> 2.2 JSTL 标签库的使用步骤</h4><p>1、先导入jstl 标签库的jar 包。<br />taglibs-standard-impl-1.2.1.jar<br />taglibs-standard-spec-1.2.1.jar<br />2、第二步，使用taglib 指令引入标签库。</p><h4 id="23-core-核心库使用"><a class="markdownIt-Anchor" href="#23-core-核心库使用"></a> 2.3 core 核心库使用</h4><h4 id="231-cset-使用很少"><a class="markdownIt-Anchor" href="#231-cset-使用很少"></a> 2.3.1 &lt;c:set /&gt;（使用很少）</h4><pre><code>作用：set 标签可以往域中保存数据</code></pre><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">i.&lt;c:set /&gt;</span><br><span class="line">    作用：set 标签可以往域中保存数据</span><br><span class="line">        </span><br><span class="line">    域对象.setAttribute(key,value);</span><br><span class="line">    scope 属性设置保存到哪个域</span><br><span class="line">        page 表示PageContext 域（默认值）</span><br><span class="line">        request 表示Request 域</span><br><span class="line">        session 表示Session 域</span><br><span class="line">        application 表示ServletContext 域</span><br><span class="line">    <span class="keyword">var</span> 属性设置key 是多少</span><br><span class="line">    value 属性设置值</span><br><span class="line">--%&gt;           </span><br><span class="line">保存之前：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br><span class="line">&lt;c:set scope=<span class="string">"session"</span> <span class="keyword">var</span>=<span class="string">"abc"</span> value=<span class="string">"abcValue"</span>/&gt;</span><br><span class="line">保存之后：$&#123; sessionScope.abc &#125; &lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="232-cif"><a class="markdownIt-Anchor" href="#232-cif"></a> 2.3.2 &lt;c:if /&gt;</h4><pre><code>if 标签用来做if 判断。</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">ii.&lt;c:<span class="keyword">if</span> /&gt;</span><br><span class="line"><span class="keyword">if</span> 标签用来做<span class="keyword">if</span> 判断。</span><br><span class="line">test 属性表示判断的条件（使用EL 表达式输出）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 == 12 &#125;"</span>&gt;</span><br><span class="line">&lt;h1&gt;12 等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; 12 != 12 &#125;"</span>&gt;</span><br><span class="line">&lt;h1&gt;12 不等于12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h4 id="233-cchoosecwhencotherwise标签"><a class="markdownIt-Anchor" href="#233-cchoosecwhencotherwise标签"></a> 2.3.3 &lt;c:choose&gt;&lt;c:when&gt;&lt;c:otherwise&gt;标签</h4><pre><code>作用：多路判断。跟switch ... case .... default 非常接近</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</span><br><span class="line">作用：多路判断。跟<span class="keyword">switch</span> ... <span class="keyword">case</span> .... <span class="keyword">default</span> 非常接近</span><br><span class="line">    </span><br><span class="line">choose 标签开始选择判断</span><br><span class="line">when 标签表示每一种判断情况</span><br><span class="line">test 属性表示当前这种判断情况的值</span><br><span class="line">otherwise 标签表示剩下的情况</span><br><span class="line">    </span><br><span class="line">&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：</span><br><span class="line"><span class="number">1</span>、标签里不能使用html 注释，要使用jsp 注释</span><br><span class="line"><span class="number">2</span>、when 标签的父标签一定要是choose 标签</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"height"</span>, <span class="number">180</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;%-- 这是jsp 注释--%&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123; requestScope.height &gt; 190 &#125;"</span>&gt;</span><br><span class="line">    &lt;h2&gt;小巨人&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123; requestScope.height &gt; 180 &#125;"</span>&gt;</span><br><span class="line">    &lt;h2&gt;很高&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123; requestScope.height &gt; 170 &#125;"</span>&gt;</span><br><span class="line">    &lt;h2&gt;还可以&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;c:choose&gt;</span><br><span class="line">            &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 160&#125;"</span>&gt;</span><br><span class="line">            &lt;h3&gt;大于160&lt;/h3&gt;</span><br><span class="line">            &lt;/c:when&gt;</span><br><span class="line">            &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 150&#125;"</span>&gt;</span><br><span class="line">            &lt;h3&gt;大于150&lt;/h3&gt;</span><br><span class="line">            &lt;/c:when&gt;</span><br><span class="line">            &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 140&#125;"</span>&gt;</span><br><span class="line">            &lt;h3&gt;大于140&lt;/h3&gt;</span><br><span class="line">            &lt;/c:when&gt;</span><br><span class="line">            &lt;c:otherwise&gt;</span><br><span class="line">                其他小于<span class="number">140</span></span><br><span class="line">            &lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h4 id="234-cforeach"><a class="markdownIt-Anchor" href="#234-cforeach"></a> 2.3.4 &lt;c:forEach /&gt;</h4><pre><code>作用：遍历输出使用。</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- <span class="number">1</span>.遍历<span class="number">1</span> 到<span class="number">10</span>，输出</span><br><span class="line">    begin 属性设置开始的索引</span><br><span class="line">    end 属性设置结束的索引</span><br><span class="line">    <span class="keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;第$&#123;i&#125;行&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- <span class="number">2</span>.遍历Object 数组</span><br><span class="line">    <span class="keyword">for</span> (Object items : arr)</span><br><span class="line">    items 表示遍历的数据源（遍历的集合）</span><br><span class="line">    <span class="keyword">var</span> 表示当前遍历到的数据</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"arr"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"18610541354"</span>,<span class="string">"18688886666"</span>,<span class="string">"18699998888"</span>&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; requestScope.arr &#125;"</span> <span class="keyword">var</span>=<span class="string">"item"</span>&gt;</span><br><span class="line">$&#123; item &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">    map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">    map.put(<span class="string">"key3"</span>, <span class="string">"value3"</span>);</span><br><span class="line">    <span class="comment">// for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    request.setAttribute(<span class="string">"map"</span>, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123; requestScope.map &#125;"</span> <span class="keyword">var</span>=<span class="string">"entry"</span>&gt;</span><br><span class="line">&lt;h1&gt;$&#123;entry.key&#125; = $&#123;entry.value&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p><strong>foreach标签所有属性</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">    items 表示遍历的集合</span><br><span class="line">    <span class="keyword">var</span> 表示遍历到的数据</span><br><span class="line">    begin 表示遍历的开始索引值</span><br><span class="line">    end 表示结束的索引值</span><br><span class="line">    step 属性表示遍历的步长值</span><br><span class="line">    varStatus 属性表示当前遍历到的数据的状态</span><br><span class="line">    <span class="keyword">for</span>（<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i+=<span class="number">2</span>）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"2"</span> end=<span class="string">"7"</span> step=<span class="string">"2"</span> varStatus=<span class="string">"status"</span> items=<span class="string">"$&#123;requestScope.stus&#125;"</span> <span class="keyword">var</span>=<span class="string">"stu"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;status.step&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;el-表达式-jstl-标签库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#el-表达式-jstl-标签库&quot;&gt;&lt;/a&gt; EL 表达式 &amp;amp; JSTL 标签库&lt;/h2&gt;
&lt;h3 id=&quot;1-el-表达式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-el-表达式&quot;&gt;&lt;/a&gt; 1. EL 表达式&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JAVA EE" scheme="http://yoursite.com/categories/JAVA-EE/"/>
    
    
  </entry>
  
  <entry>
    <title>4 xml</title>
    <link href="http://yoursite.com/2021/09/04/JAVA%20EE/xml/"/>
    <id>http://yoursite.com/2021/09/04/JAVA%20EE/xml/</id>
    <published>2021-09-03T16:00:00.000Z</published>
    <updated>2021-09-12T07:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> xml</h2><h3 id="1-xml语法"><a class="markdownIt-Anchor" href="#1-xml语法"></a> 1. xml语法</h3><a id="more"></a><p>自己去菜鸟看去</p><p><strong>例子</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xml 声明version 是版本的意思encoding 是编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span> <span class="comment">&lt;!-- 这是xml 注释--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"SN123123413241"</span>&gt;</span> <span class="comment">&lt;!-- book 标签描述一本图书id 属性描述的是图书的编号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>java 编程思想<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- name 标签描述的是图书的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>华仔<span class="tag">&lt;/<span class="name">author</span>&gt;</span> <span class="comment">&lt;!-- author 单词是作者的意思，描述图书作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>9.9<span class="tag">&lt;/<span class="name">price</span>&gt;</span> <span class="comment">&lt;!-- price 单词是价格，描述的是图书的价格--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"SN12341235123"</span>&gt;</span> <span class="comment">&lt;!-- book 标签描述一本图书id 属性描述的是图书的编号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>葵花宝典<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="comment">&lt;!-- name 标签描述的是图书的信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>班长<span class="tag">&lt;/<span class="name">author</span>&gt;</span> <span class="comment">&lt;!-- author 单词是作者的意思，描述图书作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">price</span>&gt;</span>5.5<span class="tag">&lt;/<span class="name">price</span>&gt;</span> <span class="comment">&lt;!-- price 单词是价格，描述的是图书的价格--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-xml解析-dom4j"><a class="markdownIt-Anchor" href="#2-xml解析-dom4j"></a> 2. xml解析 dom4j</h3><ol><li><p>导入 dom4j.jar 包</p></li><li><p>创建SaxReader对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="comment">// 这个对象用于读取xml 文件，然后返回一个Document。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>读取XML文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Document document = reader.read(<span class="string">"src/books.xml"</span>);</span><br><span class="line"><span class="comment">// 打印到控制台，看看是否创建成功</span></span><br><span class="line">System.out.println(document);</span><br></pre></td></tr></table></figure><ol start="4"><li>通过根元素对象，获取book标签对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element root &#x3D; document.getRootElement();</span><br><span class="line">List&lt;Element&gt; books &#x3D; root.elements(&quot;book&quot;);</span><br></pre></td></tr></table></figure><ol start="5"><li>拿到book 下面的name 元素对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Element nameElement = book.element("name");</span><br></pre></td></tr></table></figure><ol start="6"><li>getText()得到元素内的文本内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameElement.getText();</span><br></pre></td></tr></table></figure><ol start="7"><li>elementText()得到元素内的文本内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book.elementText("name");</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xml&quot;&gt;&lt;/a&gt; xml&lt;/h2&gt;
&lt;h3 id=&quot;1-xml语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-xml语法&quot;&gt;&lt;/a&gt; 1. xml语法&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JAVA EE" scheme="http://yoursite.com/categories/JAVA-EE/"/>
    
    
  </entry>
  
  <entry>
    <title>3 Servlet</title>
    <link href="http://yoursite.com/2021/09/03/JAVA%20EE/Servlet/"/>
    <id>http://yoursite.com/2021/09/03/JAVA%20EE/Servlet/</id>
    <published>2021-09-02T16:00:00.000Z</published>
    <updated>2021-09-12T07:07:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h2><h3 id="1-servlet配置"><a class="markdownIt-Anchor" href="#1-servlet配置"></a> 1. Servlet配置</h3><a id="more"></a><p><strong>web.xml中的配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- servlet 标签给Tomcat 配置Servlet 程序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-name 标签Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-class 是Servlet 程序的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-mapping 标签给servlet 程序配置访问地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个Servlet 程序使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url-pattern 标签配置访问地址</span></span><br><span class="line"><span class="comment">/ 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">/hello 表示地址为：http://ip:port/工程路径/hello </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>从Servlet3.0开始，配置Servlet支持注解方式</strong></p><p>@WebServlet注解用于标注在一个继承了HttpServlet类之上，属于类级别的注解。</p><p><img src="https://img2018.cnblogs.com/i-beta/1913588/202001/1913588-20200103165022431-1582263216.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(name &#x3D; &quot;helloServlet&quot;, value &#x3D; &quot;&#x2F;hello-servlet&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/10/qnEHNAzlDR6wQji.png" alt="1.png" /></p><h3 id="2-servlet的生命周期"><a class="markdownIt-Anchor" href="#2-servlet的生命周期"></a> 2. Servlet的生命周期</h3><ol><li>执行Servlet 构造器方法</li><li>执行init 初始化方法</li><li>执行service 方法</li><li>执行destroy 销毁方法</li></ol><ul><li><p>第一、二步，是在第一次访问，的时候创建Servlet 程序会调用。</p></li><li><p>第三步，每次访问都会调用。</p></li><li><p>第四步，在web 工程停止的时候调用。</p></li></ul><h3 id="3-get和post请求的处理"><a class="markdownIt-Anchor" href="#3-get和post请求的处理"></a> 3. GET和POST请求的处理</h3><p><strong>1. 将servletRequest转换成HttpServletRequest并处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3 service === Hello Servlet 被访问了"</span>);</span><br><span class="line">        <span class="comment">// 类型转换（因为它有getMethod()方法）</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">// 获取请求的方式</span></span><br><span class="line">        String method = httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"GET"</span>.equals(method)) &#123;</span><br><span class="line">        doGet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"POST"</span>.equals(method)) &#123;</span><br><span class="line">        doPost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 通过继承HttpServlet类实现Servlet程序</strong><br />一般在实际项目开发中，都是使用继承HttpServlet 类的方式去实现Servlet 程序。<br />1、编写一个类去继承HttpServlet 类<br />2、根据业务需要重写doGet 或doPost 方法<br />3、到web.xml 中的配置Servlet 程序的访问地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">    IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloServlet2 的doGet 方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">    IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloServlet2 的doPost 方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-servlet类的继承体系"><a class="markdownIt-Anchor" href="#4-servlet类的继承体系"></a> 4. Servlet类的继承体系</h3><p><img src="https://i.loli.net/2021/09/10/sXMGemVBli72vKH.png" alt="2.png" /></p><h3 id="5-servletconfig类"><a class="markdownIt-Anchor" href="#5-servletconfig类"></a> 5. ServletConfig类</h3><p>Servlet 程序和ServletConfig 对象都是由Tomcat 负责创建，我们负责使用。<br />Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个Servlet 程序创建时，就创建一个对应的ServletConfig 对象。</p><h4 id="51-servletconfig类的三大作用"><a class="markdownIt-Anchor" href="#51-servletconfig类的三大作用"></a> 5.1 ServletConfig类的三大作用</h4><p>1、可以获取Servlet 程序的别名servlet-name 的值<br />2、获取初始化参数init-param<br />3、获取ServletContext 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是参数名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是参数值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、可以获取Servlet 程序的别名servlet-name 的值</span></span><br><span class="line">System.out.println(<span class="string">"HelloServlet 程序的别名是:"</span> + servletConfig.getServletName());</span><br><span class="line"><span class="comment">// 2、获取初始化参数init-param</span></span><br><span class="line">System.out.println(<span class="string">"初始化参数username 的值是;"</span> + servletConfig.getInitParameter(<span class="string">"username"</span>));</span><br><span class="line">System.out.println(<span class="string">"初始化参数url 的值是;"</span> + servletConfig.getInitParameter(<span class="string">"url"</span>));</span><br><span class="line"><span class="comment">// 3、获取ServletContext 对象</span></span><br><span class="line">System.out.println(servletConfig.getServletContext());</span><br></pre></td></tr></table></figure><h3 id="6-servletcontext-类"><a class="markdownIt-Anchor" href="#6-servletcontext-类"></a> 6. ServletContext 类</h3><p>1、ServletContext 是一个接口，它表示Servlet 上下文对象<br />2、一个web 工程，只有一个ServletContext 对象实例。<br />3、ServletContext 对象是一个域对象。<br />4、ServletContext 是在web 工程部署启动的时候创建。在web 工程停止的时候销毁。</p><h4 id="61-servletcontext-类的四个作用"><a class="markdownIt-Anchor" href="#61-servletcontext-类的四个作用"></a> 6.1 ServletContext 类的四个作用</h4><p>1、获取web.xml 中配置的上下文参数context-param<br />2、获取当前的工程路径，格式: /工程路径<br />3、获取工程部署后在服务器硬盘上的绝对路径<br />4、像Map 一样存取数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个web 工程)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个web 工程)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、获取web.xml 中配置的上下文参数context-param</span></span><br><span class="line">ServletContext context = getServletConfig().getServletContext();</span><br><span class="line">String username = context.getInitParameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">System.out.println( <span class="string">"当前工程路径:"</span> + context.getContextPath() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">System.out.println(<span class="string">"工程部署的路径是:"</span> + context.getRealPath(<span class="string">"/"</span>));</span><br><span class="line">System.out.println(<span class="string">"工程下css 目录的绝对路径是:"</span> + context.getRealPath(<span class="string">"/css"</span>));</span><br><span class="line">System.out.println(<span class="string">"工程下imgs 目录1.jpg 的绝对路径是:"</span> + context.getRealPath(<span class="string">"/imgs/1.jpg"</span>));</span><br></pre></td></tr></table></figure><h4 id="62-servletcontext-像map-一样存取数据"><a class="markdownIt-Anchor" href="#62-servletcontext-像map-一样存取数据"></a> 6.2 ServletContext 像Map 一样存取数据</h4><p>可以在两个Servlet间传递数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Servlet1</span></span><br><span class="line"><span class="comment">// 获取ServletContext 对象</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">System.out.println(<span class="string">"Context1 中获取域数据key1 的值是:"</span>+ context.getAttribute(<span class="string">"key1"</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Servlet2</span></span><br><span class="line">ServletContext context = getServletContext();</span><br><span class="line">System.out.println(<span class="string">"Context2 中获取域数据key1 的值是:"</span>+ context.getAttribute(<span class="string">"key1"</span>));</span><br></pre></td></tr></table></figure><h3 id="7-http-协议"><a class="markdownIt-Anchor" href="#7-http-协议"></a> 7. HTTP 协议</h3><h4 id="71-get请求"><a class="markdownIt-Anchor" href="#71-get请求"></a> 7.1 GET请求</h4><p><strong>请求行</strong></p><p>(1) 请求的方式GET<br />(2) 请求的资源路径[+?+请求参数]<br />(3) 请求的协议的版本号HTTP/1.1</p><p><strong>请求头</strong></p><p>key : value 组成不同的键值对，表示不同的含义。</p><p><img src="https://i.loli.net/2021/09/10/vJIQiENUH74SmyR.png" alt="3.png" /></p><h4 id="72-post请求"><a class="markdownIt-Anchor" href="#72-post请求"></a> 7.2 POST请求</h4><p><strong>请求行</strong></p><p>(1) 请求的方式GET<br />(2) 请求的资源路径[+?+请求参数]<br />(3) 请求的协议的版本号HTTP/1.1</p><p><strong>请求头</strong></p><ol><li>key : value 不同的请求头，有不同的含义<br />空行</li></ol><ul><li>常用请求头的说明<ul><li>Accept: 表示客户端可以接收的数据类型</li><li>Accpet-Languege: 表示客户端可以接收的语言类型</li><li>User-Agent: 表示客户端浏览器的信息</li><li>Host： 表示请求时的服务器ip 和端口号</li></ul></li></ul><p><strong>请求体</strong></p><p>​发送给服务器的数据</p><p><img src="https://i.loli.net/2021/09/10/W89cSpw1yNVnhmM.png" alt="4.png" /></p><h4 id="73-get请求和post请求的方式"><a class="markdownIt-Anchor" href="#73-get请求和post请求的方式"></a> 7.3 GET请求和POST请求的方式</h4><p><strong>GET请求</strong></p><p>1、form 标签method=get<br />2、a 标签<br />3、link 标签引入css<br />4、Script 标签引入js 文件<br />5、img 标签引入图片<br />6、iframe 引入html 页面<br />7、在浏览器地址栏中输入地址后敲回车</p><p><strong>POST请求</strong></p><p>8、form 标签method=post</p><h4 id="74-get-和-post的区别"><a class="markdownIt-Anchor" href="#74-get-和-post的区别"></a> 7.4 Get 和 Post的区别</h4><p>1、Get 是用来从服务器上获得数据，而 Post 是用来向服务器上传递数据。</p><p>2、Get 将表单中数据的按照 variable=value 的形式，添加到 action 所指向的 URL 后面，并且两者使用“?”连接，而各个变量之间使用“&amp;”连接；Post 是将表单中的数据放在 form 的数据体中，按照变量和值相对应的方式，传递到 action 所指向 URL。</p><p>3、Get 是不安全的，因为在传输过程，数据被放在请求的 URL 中，而如今现有的很多服务器、代理服务器或者用户代理都会将请求URL记录到日志文件中，然后放在某个地方，这样就可能会有一些隐私的信息被第三方看到。另外，用户也可以在浏览器上直接看到提交的数据，一些系统内部消息将会一同显示在用户面前。Post 的所有操作对用户来说都是不可见的。</p><p>4、Get 传输的数据量小，这主要是因为受 URL 长度限制；而 Post 可以传输大量的数据，所以在上传文件只能使用 Post（当然还有一个原因，将在后面的提到）。</p><p>5、Get 限制 Form 表单的数据集的值必须为 ASCII 字符；而 Post 支持整个 ISO10646 字符集。</p><p>6、Get 是 Form 的默认方法。</p><h4 id="75-响应的http协议格式"><a class="markdownIt-Anchor" href="#75-响应的http协议格式"></a> 7.5 响应的HTTP协议格式</h4><p><strong>响应行</strong></p><p>(1) 响应的协议和版本号<br />(2) 响应状态码<br />(3) 响应状态描述符</p><p><strong>响应头</strong></p><p>(1) key : value 不同的响应头，有其不同含义<br />空行</p><p><strong>响应体</strong></p><p>​是回传给客户端的数据</p><p><img src="https://i.loli.net/2021/09/10/PCEh8pByo5agbDW.png" alt="5.png" /></p><h4 id="751-常用的响应码"><a class="markdownIt-Anchor" href="#751-常用的响应码"></a> 7.5.1 常用的响应码</h4><p>200 表示请求成功<br />302 表示请求重定向<br />404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）<br />500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h3 id="8-httpservletrequest-类"><a class="markdownIt-Anchor" href="#8-httpservletrequest-类"></a> 8. HttpServletRequest 类</h3><p>每次只要有请求进入Tomcat 服务器，Tomcat 服务器就会把请求过来的HTTP 协议信息解析好封装到Request 对象中。然后传递到service 方法（doGet 和doPost）中给我们使用。我们可以通过HttpServletRequest 对象，获取到所有请求的信息。</p><h4 id="81-httpservletrequest-类常用方法"><a class="markdownIt-Anchor" href="#81-httpservletrequest-类常用方法"></a> 8.1 HttpServletRequest 类常用方法</h4><p><img src="https://i.loli.net/2021/09/10/GzduneiY7jEQ2cp.png" alt="6.png" /></p><p><strong>request.setAttribute()</strong></p><p>有效范围是一个请求范围，不发送请求的界面无法获取到value的值，jsp界面获取使用EL表达式${num}；<br />只能在一个request内有效，如果重定向客户端，将取不到值。</p><p>request在当次的请求的URL之间有效，比如，你在请求某个servlet，那么你提交的信息，可以使用request.getAttribute()方式获得，而当你再次跳转之后，这些信息将不存在。</p><p><strong>request.getSession().setAttribute(“num”,value)；</strong></p><p>有效范围是一个session周期，在session过期之前或者用户关闭页面之前是有效的，jsp界面获取使用EL表达式${num}；</p><p>可以通过sessionID得到自己的session，将参数存储在session中，即使重定向客户端也没事，这个值可以在多个页面上使用。</p><p>比如访问一个网站，登录后用户信息被保存到session中，在session过期之前或者用户关闭页面之前，用户信息可以通过request.getSession().getAttribute()方式获得。</p><h4 id="82-获取请求参数"><a class="markdownIt-Anchor" href="#82-获取请求参数"></a> 8.2 获取请求参数</h4><p>表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"http://localhost:8080/07_servlet/parameterServlet"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br/&gt;</span><br><span class="line">        兴趣爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"cpp"</span>&gt;C++</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"java"</span>&gt;Java</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"js"</span>&gt;JavaScript&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span></span><br><span class="line"><span class="function">    IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 防止中文乱码</span></span><br><span class="line">     response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);   </span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取请求参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String[] hobby = req.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">        System.out.println(<span class="string">"密码："</span> + password);</span><br><span class="line">        System.out.println(<span class="string">"兴趣爱好："</span> + Arrays.asList(hobby));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="83-乱码问题"><a class="markdownIt-Anchor" href="#83-乱码问题"></a> 8.3 乱码问题</h4><p><strong>doGet 请求的中文乱码解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求参数</span></span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 先以iso8859-1 进行编码</span></span><br><span class="line"><span class="comment">//2 再以utf-8 进行解码</span></span><br><span class="line">username = <span class="keyword">new</span> String(username.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>POST 请求的中文乱码解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求体的字符集为UTF-8，从而解决post 请求的中文乱码问题</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><h3 id="9-请求转发"><a class="markdownIt-Anchor" href="#9-请求转发"></a> 9. 请求转发</h3><p>请求转发 是指服务器收到请求后，从一次资源跳转到另一个资源的操作。</p><p><img src="https://i.loli.net/2021/09/10/y73DuIRfL8mFM9K.png" alt="7.png" /></p><p>Servlet1代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(<span class="string">"在Servlet1（柜台1）中查看参数（材料）："</span> + username);</span><br><span class="line"><span class="comment">// 给材料盖一个章，并传递到Servlet2（柜台2）去查看</span></span><br><span class="line">req.setAttribute(<span class="string">"key1"</span>,<span class="string">"柜台1 的章"</span>);</span><br><span class="line"><span class="comment">// 问路：Servlet2（柜台2）怎么走</span></span><br><span class="line"><span class="comment">/*** 请求转发必须要以斜杠打头，/ 斜杠表示地址为：http://ip:port/工程名/ , 映射到IDEA 代码的web 目录**/</span></span><br><span class="line">RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="string">"/servlet2"</span>);</span><br><span class="line"><span class="comment">// RequestDispatcher requestDispatcher = req.getRequestDispatcher("http://www.baidu.com");</span></span><br><span class="line"><span class="comment">// 走向Sevlet2（柜台2）</span></span><br><span class="line">requestDispatcher.forward(req,resp);</span><br></pre></td></tr></table></figure><p>Servlet2代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求的参数（办事的材料）查看</span></span><br><span class="line">String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">System.out.println(<span class="string">"在Servlet2（柜台2）中查看参数（材料）："</span> + username);</span><br><span class="line"><span class="comment">// 查看柜台1 是否有盖章</span></span><br><span class="line">Object key1 = req.getAttribute(<span class="string">"key1"</span>);</span><br><span class="line">System.out.println(<span class="string">"柜台1 是否有章："</span> + key1);</span><br><span class="line"><span class="comment">// 处理自己的业务</span></span><br><span class="line">System.out.println(<span class="string">"Servlet2 处理自己的业务"</span>);</span><br></pre></td></tr></table></figure><p><strong>base标签</strong></p><p><img src="https://i.loli.net/2021/09/10/iHQR4qzOXCB5dM6.png" alt="8.png" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--base 标签设置页面相对路径工作时参照的地址 href 属性就是参数的地址值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/07_servlet/a/b/"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-的意义"><a class="markdownIt-Anchor" href="#10-的意义"></a> 10. / 的意义</h3><p>在web 中/ 斜杠是一种绝对路径。</p><p>/ 斜杠如果被浏览器解析，得到的地址是：<a href="http://ip" target="_blank" rel="noopener">http://ip</a>:port/</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/ 斜杠如果被服务器解析，得到的地址是：<a href="http://ip" target="_blank" rel="noopener">http://ip</a>:port/工程路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、servletContext.getRealPath(“/”);</span><br><span class="line"><span class="number">2</span>、request.getRequestDispatcher(“/”);</span><br></pre></td></tr></table></figure><p>特殊情况</p><p>把斜杠发给浏览器解析，得到<a href="http://ip" target="_blank" rel="noopener">http://ip</a>:port/</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"/"</span>)</span><br></pre></td></tr></table></figure><h3 id="11-httpservletresponse-类"><a class="markdownIt-Anchor" href="#11-httpservletresponse-类"></a> 11. HttpServletResponse 类</h3><p>HttpServletResponse 类和HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个Response 对象传递给Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过HttpServletResponse 对象来进行设置</p><h4 id="111-两个输出流"><a class="markdownIt-Anchor" href="#111-两个输出流"></a> 11.1 两个输出流</h4><p><img src="https://i.loli.net/2021/09/10/UruGaK384NPDJsb.png" alt="9.png" /></p><p>两个流同时只能使用一个</p><h4 id="112-向客户端回传数据"><a class="markdownIt-Anchor" href="#112-向客户端回传数据"></a> 11.2 向客户端回传数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter writer = resp.getWriter();</span><br><span class="line">writer.write(<span class="string">"response's content!!!"</span>);</span><br></pre></td></tr></table></figure><h4 id="113-解决响应中文乱码"><a class="markdownIt-Anchor" href="#113-解决响应中文乱码"></a> 11.3 解决响应中文乱码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它会同时设置服务器和客户端都使用UTF-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">// 此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">resp.setContentType(<span class="string">"text/html; charset=UTF-8"</span>);</span><br></pre></td></tr></table></figure><h3 id="12-请求重定向"><a class="markdownIt-Anchor" href="#12-请求重定向"></a> 12. 请求重定向</h3><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）。</p><p><img src="https://i.loli.net/2021/09/10/eOliZKmQuk5HJpt.png" alt="10.png" /></p><h4 id="121-第一种方案"><a class="markdownIt-Anchor" href="#121-第一种方案"></a> 12.1 第一种方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应状态码302 ，表示重定向，（已搬迁）</span></span><br><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line"><span class="comment">// 设置响应头，说明新的地址在哪里</span></span><br><span class="line">resp.setHeader(<span class="string">"Location"</span>, <span class="string">"http://localhost:8080"</span>);</span><br></pre></td></tr></table></figure><h4 id="122-第二种方案推荐"><a class="markdownIt-Anchor" href="#122-第二种方案推荐"></a> 12.2 第二种方案（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">"http://localhost:8080"</span>);</span><br></pre></td></tr></table></figure><h4 id="123-转发和重定向的区别"><a class="markdownIt-Anchor" href="#123-转发和重定向的区别"></a> 12.3 转发和重定向的区别</h4><p>1）使用相对路径在重定向和转发中没有区别<br />2）重定向和请求转发使用绝对路径时，根/路径代表了不同含义<br /><strong>重定向</strong>response.sendRedirect(“xxx”)是服务器向客户端发送一个请求头信息，由客户端再请求一次服务器。/指的Tomcat的根目录,写绝对路径应该写成&quot;/当前Web程序根名称/资源名&quot; 。如&quot;/WebModule/login.jsp&quot;,“/bbs/servlet/LoginServlet”</p><p><strong>转发</strong>是在服务器内部进行的，写绝对路径/开头指的是当前的Web应用程序。绝对路径写法就是&quot;/login.jsp&quot;或&quot;/servlet/LoginServlet&quot;。</p><p><strong>总结</strong>：以上要注意是区分是从服务器外的请求，还在是内部转发，从服务器外的请求，从Tomcat根写起(就是要包括当前Web的根)；是服务器内部的转发，很简单了，因为在当前服务器内，/写起指的就是当前Web的根目录。</p><p><strong>注意</strong></p><p>假如一开始访问到的是<a href="http://localhost:8080/myProject/index.html" target="_blank" rel="noopener">http://localhost:8080/myProject/index.html</a> , 然后该页面通过GET请求访问到对应的Servlet, 此时重定向的相对路径不是相对于Servlet而言的，而是相对于原先请求路径而言（或者说相对于用户浏览器上面显示的页面地址而言），即相对于：<br /><a href="http://localhost:8080/myProject/index.html" target="_blank" rel="noopener">http://localhost:8080/myProject/index.html</a> 而言。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;servlet&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#servlet&quot;&gt;&lt;/a&gt; Servlet&lt;/h2&gt;
&lt;h3 id=&quot;1-servlet配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-servlet配置&quot;&gt;&lt;/a&gt; 1. Servlet配置&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JAVA EE" scheme="http://yoursite.com/categories/JAVA-EE/"/>
    
    
  </entry>
  
  <entry>
    <title>2 jsp</title>
    <link href="http://yoursite.com/2021/09/02/JAVA%20EE/jsp/"/>
    <id>http://yoursite.com/2021/09/02/JAVA%20EE/jsp/</id>
    <published>2021-09-01T16:00:00.000Z</published>
    <updated>2021-09-10T07:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="jsp"><a class="markdownIt-Anchor" href="#jsp"></a> jsp</h2><h3 id="1-jsp简介"><a class="markdownIt-Anchor" href="#1-jsp简介"></a> 1. jsp简介</h3><a id="more"></a><p>jsp 的全换是java server pages。Java 的服务器页面。</p><p>jsp 的主要作用是代替Servlet 程序回传html 页面的数据。</p><p>jsp 页面本质上是一个Servlet 程序。</p><h3 id="2-jsp语法"><a class="markdownIt-Anchor" href="#2-jsp语法"></a> 2. jsp语法</h3><h4 id="21-jsp头部的-page-指令"><a class="markdownIt-Anchor" href="#21-jsp头部的-page-指令"></a> 2.1 jsp头部的 page 指令</h4><p>jsp 的page 指令可以修改jsp 页面中一些重要的属性，或者行为。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br></pre></td></tr></table></figure><ol><li><p><strong>language</strong> 属性</p><p>表示jsp 翻译后是什么语言文件。暂时只支持java。</p></li><li><p><strong>contentType</strong> 属性</p><p>表示jsp 返回的数据类型是什么。也是源码中response.setContentType()参数值</p></li><li><p><strong>pageEncoding</strong> 属性</p><p>表示当前jsp 页面文件本身的字符集。</p></li><li><p><strong>import</strong> 属性</p><p>跟java 源代码中一样。用于导包，导类。</p></li><li><p><strong>autoFlush</strong> 属性</p><p>设置当out 输出流缓冲区满了之后，是否自动刷新缓冲区。默认值是true。</p></li><li><p><strong>buffer</strong> 属性</p><p>设置out 缓冲区的大小。默认是8kb</p></li><li><p><strong>errorPage</strong> 属性</p><p>设置当jsp 页面运行时出错，自动跳转去的错误页面路径。</p></li><li><p><strong>isErrorPage</strong> 属性</p><p>设置当前jsp 页面是否是错误信息页面。默认是false。如果是true 可以获取异常信息。</p></li><li><p><strong>session</strong> 属性</p><p>设置访问当前jsp 页面，是否会创建HttpSession 对象。默认是true。</p></li><li><p><strong>extends</strong> 属性</p><p>设置jsp 翻译出来的java 类默认继承谁。</p></li></ol><h4 id="22-jsp-声明脚本"><a class="markdownIt-Anchor" href="#22-jsp-声明脚本"></a> 2.2 jsp 声明脚本</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 声明java 代码%&gt;</span><br></pre></td></tr></table></figure><p>作用：可以给jsp 翻译出来的java 类定义属性和方法甚至是静态代码块。内部类等。</p><p><img src="https://i.loli.net/2021/09/10/JsijRt9L1VkErbD.png" alt="1.png" /></p><h4 id="23-jsp-表达式脚本"><a class="markdownIt-Anchor" href="#23-jsp-表达式脚本"></a> 2.3 jsp 表达式脚本</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=表达式%&gt;</span><br></pre></td></tr></table></figure><p>表达式脚本的作用是：的jsp 页面上输出数据。</p><p><strong>表达式脚本的特点</strong></p><p>1、表达式脚本都会被翻译成为out.print()输出到页面上</p><p>2、由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。</p><p>3、表达式脚本中的表达式不能以分号结束。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=<span class="number">12</span> %&gt; &lt;br&gt;</span><br><span class="line">&lt;%=<span class="number">12.12</span> %&gt; &lt;br&gt;</span><br><span class="line">&lt;%=<span class="string">"我是字符串"</span> %&gt; &lt;br&gt;</span><br><span class="line">&lt;%=map%&gt; &lt;br&gt;</span><br><span class="line">&lt;%=request.getParameter(<span class="string">"username"</span>)%&gt;</span><br></pre></td></tr></table></figure><h4 id="24-jsp-代码脚本"><a class="markdownIt-Anchor" href="#24-jsp-代码脚本"></a> 2.4 jsp 代码脚本</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">java 语句</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>代码脚本的作用是：可以在jsp 页面中，编写我们自己需要的功能（写的是java 语句）。</p><p><img src="https://i.loli.net/2021/09/10/KYQHrFA78wUeDuJ.png" alt="2.png" /></p><h4 id="25-jsp-中的三种注释"><a class="markdownIt-Anchor" href="#25-jsp-中的三种注释"></a> 2.5 jsp 中的三种注释</h4><h5 id="251-html注释"><a class="markdownIt-Anchor" href="#251-html注释"></a> 2.5.1 html注释</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这是html 注释--&gt;</span><br></pre></td></tr></table></figure><p>html 注释会被翻译到java 源代码中。在_jspService 方法里，以out.writer 输出到客户端。</p><h5 id="252-java-注释"><a class="markdownIt-Anchor" href="#252-java-注释"></a> 2.5.2 java 注释</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 单行java 注释</span></span><br><span class="line">    <span class="comment">/* 多行java 注释*/</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>java 注释会被翻译到java 源代码中。</p><h5 id="253-jsp-注释"><a class="markdownIt-Anchor" href="#253-jsp-注释"></a> 2.5.3 jsp 注释</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 这是jsp 注释--%&gt;</span><br></pre></td></tr></table></figure><p>jsp 注释可以注掉jsp 页面中所有代码。</p><h3 id="3-jsp-九大内置对象"><a class="markdownIt-Anchor" href="#3-jsp-九大内置对象"></a> 3. jsp 九大内置对象</h3><p>jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，内部提供的九大对象，叫内置对象。</p><p><img src="https://i.loli.net/2021/09/10/aYieUXRo7pu1OZI.png" alt="3.png" /></p><h4 id="31-jsp-四大域对象"><a class="markdownIt-Anchor" href="#31-jsp-四大域对象"></a> 3.1 jsp 四大域对象</h4><p>四个域对象分别是：</p><p><img src="https://i.loli.net/2021/09/10/btTO6vIhSpQrDKV.png" alt="4.png" /></p><p>域对象是可以像Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。</p><h4 id="32-jsp-中的-out-输出和-responsegetwriter-输出的区别"><a class="markdownIt-Anchor" href="#32-jsp-中的-out-输出和-responsegetwriter-输出的区别"></a> 3.2 jsp 中的 out 输出和 response.getWriter 输出的区别</h4><p>response 中表示响应，我们经常用于设置返回给客户端的内容（输出）<br />out 也是给用户做输出使用的。</p><p><img src="https://i.loli.net/2021/09/10/Ds5YpfGFERIVxXd.png" alt="5.png" /></p><p>由于jsp 翻译之后，底层源代码都是使用out 来进行输出，所以<strong>一般情况下。我们在jsp 页面中统一使用out 来进行输出</strong>。避免打乱页面输出内容的顺序。</p><p>out.write() 输出字符串没有问题<br />out.print() 输出任意数据都没有问题（都转换成为字符串后调用的write 输出）</p><h3 id="4-jsp-常用标签"><a class="markdownIt-Anchor" href="#4-jsp-常用标签"></a> 4. jsp 常用标签</h3><h4 id="41-jsp-静态包含"><a class="markdownIt-Anchor" href="#41-jsp-静态包含"></a> 4.1 jsp 静态包含</h4><p>示例说明：</p><p>&lt;%@ include file=“”%&gt; 就是静态包含<br />file 属性指定你要包含的jsp 页面的路径<br />地址中第一个斜杠/ 表示为<a href="http://ip" target="_blank" rel="noopener">http://ip</a>:port/工程路径/ 映射到代码的web 目录<br />静态包含的特点：<br />1、静态包含不会翻译被包含的jsp 页面。</p><p>​    2、静态包含其实是把被包含的jsp 页面的代码拷贝到包含的位置执行输出。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"/include/footer.jsp"</span>%&gt;</span><br></pre></td></tr></table></figure><h4 id="42-jsp-动态包含"><a class="markdownIt-Anchor" href="#42-jsp-动态包含"></a> 4.2 jsp 动态包含</h4><p>示例说明：</p><p>&lt;jsp:include page=“”&gt;&lt;/jsp:include&gt; 这是动态包含<br />page 属性是指定你要包含的jsp 页面的路径<br />动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置<br />动态包含的特点：<br />1、动态包含会把包含的jsp 页面也翻译成为java 代码</p><p>​2、动态包含底层代码使用如下代码去调用被包含的jsp 页面执行输出。<br />​JspRuntimeLibrary.include(request, response, “/include/footer.jsp”, out, false);</p><p>​3、动态包含，还可以传递参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"/include/footer.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"username"</span> value=<span class="string">"bbj"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><p>动态包含的底层原理：</p><p><img src="https://i.loli.net/2021/09/10/96OZqkepSxKrhbu.png" alt="6.png" /></p><h4 id="43-jsp-标签-转发"><a class="markdownIt-Anchor" href="#43-jsp-标签-转发"></a> 4.3 jsp 标签-转发</h4><p>示例说明：</p><ul><li>&lt;jsp:forward page=“”&gt;&lt;/jsp:forward&gt; 是请求转发标签，它的功能就是请求转发</li><li>page 属性设置请求转发的路径</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page="/scope2.jsp"&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h4 id="44-jsp-代码示例"><a class="markdownIt-Anchor" href="#44-jsp-代码示例"></a> 4.4 jsp 代码示例</h4><p>九九乘法表：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%-- 练习一：在jsp 页面中输出九九乘法口诀表--%&gt;</span><br><span class="line">    &lt;h1 align="center"&gt;九九乘法口诀表&lt;/h1&gt;</span><br><span class="line">    &lt;table align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;%-- 外层循环遍历行--%&gt;</span><br><span class="line">    &lt;% <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; %&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;%-- 内层循环遍历单元格--%&gt;</span><br><span class="line">        &lt;% <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i ; j++) &#123; %&gt;</span><br><span class="line">        &lt;td&gt;&lt;%=j + "x" + i + "=" + (i*j)%&gt;&lt;/td&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>jsp 请求转发的使用：<br /><img src="https://i.loli.net/2021/09/10/PyxsINeo2ib1hjM.png" alt="7.png" /></p><h3 id="5-listener监听器"><a class="markdownIt-Anchor" href="#5-listener监听器"></a> 5. Listener监听器</h3><p>1、Listener 监听器它是JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监<br />听器。</p><p>2、Listener 它是JavaEE 的规范，就是接口</p><p>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</p><h4 id="51-servletcontextlistener-监听器"><a class="markdownIt-Anchor" href="#51-servletcontextlistener-监听器"></a> 5.1 ServletContextListener 监听器</h4><p>ServletContextListener 它可以监听ServletContext 对象的创建和销毁。</p><p>ServletContext 对象在web 工程启动的时候创建，在web 工程停止的时候销毁。</p><p>监听到创建和销毁之后都会分别调用ServletContextListener 监听器的方法反馈。</p><p>两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContextListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在ServletContext 对象创建之后马上调用，做初始化</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在ServletContext 对象销毁之后调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ServletContextListener 监听器监听ServletContext 对象：</p><p>​1、编写一个类去实现ServletContextListener<br />​2、实现其两个回调方法<br />​3、到web.xml 中去配置监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListenerImpl</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ServletContext 对象被创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ServletContext 对象被销毁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.java.listener.MyServletContextListenerImpl<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jsp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jsp&quot;&gt;&lt;/a&gt; jsp&lt;/h2&gt;
&lt;h3 id=&quot;1-jsp简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-jsp简介&quot;&gt;&lt;/a&gt; 1. jsp简介&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JAVA EE" scheme="http://yoursite.com/categories/JAVA-EE/"/>
    
    
  </entry>
  
  <entry>
    <title>1 Java EE</title>
    <link href="http://yoursite.com/2021/09/01/JAVA%20EE/Java%20EE/"/>
    <id>http://yoursite.com/2021/09/01/JAVA%20EE/Java%20EE/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2021-09-10T07:01:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="java-ee"><a class="markdownIt-Anchor" href="#java-ee"></a> Java EE</h2><a id="more"></a><p><img src="https://i.loli.net/2021/09/10/tEQTmnpUJKaDdl3.png" alt="1.png" /></p><p><img src="https://i.loli.net/2021/09/10/eDuJ26NmzLh9nxs.png" alt="2.png" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select"</span></span><br></pre></td></tr></table></figure><h3 id="1-路径"><a class="markdownIt-Anchor" href="#1-路径"></a> 1. 路径</h3><p>获取绝对路径路径 ,开发项目一定要使用绝对路径，不然肯定出错</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">&lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br></pre></td></tr></table></figure><p>request.getSchema()可以返回当前页面使用的协议，http 或是 https;</p><p>request.getServerName()可以返回当前页面所在的服务器的名字;</p><p>request.getServerPort()可以返回当前页面所在的服务器使用的端口,就是80;</p><p>request.getContextPath()可以返回当前页面所在的应用的名字;</p><h3 id="2-debug"><a class="markdownIt-Anchor" href="#2-debug"></a> 2. Debug</h3><h4 id="21-测试工具栏"><a class="markdownIt-Anchor" href="#21-测试工具栏"></a> 2.1 测试工具栏</h4><p><img src="https://i.loli.net/2021/09/10/ED6S4duG1hqfY3z.png" alt="3.png" /></p><p><img src="https://i.loli.net/2021/09/10/akT3cIZNnMvhREU.png" alt="4.png" /></p><p><img src="https://i.loli.net/2021/09/10/XyuBN7SPYi153Ap.png" alt="5.png" /></p><h4 id="22-方法栈调用窗口"><a class="markdownIt-Anchor" href="#22-方法栈调用窗口"></a> 2.2 方法栈调用窗口</h4><p>1、方法调用栈可以查看当前线程有哪些方法调用信息<br />2、下面的调用上一行的方法</p><p><img src="https://i.loli.net/2021/09/10/EoCUDlFtVLHQW1d.png" alt="6.png" /></p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><ul><li><p>ctrl + shift + T：新建测试</p></li><li><p>ctrl + alt + T：try + catch</p></li><li><p>ctrl + p：查看函数需要的参数</p></li><li><p>ctrl + alt + shift + L：格式化代码</p></li><li><p>ctrl + shift + / ：多行注释</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java-ee&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-ee&quot;&gt;&lt;/a&gt; Java EE&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JAVA EE" scheme="http://yoursite.com/categories/JAVA-EE/"/>
    
    
  </entry>
  
  <entry>
    <title>5 js BOM</title>
    <link href="http://yoursite.com/2021/08/22/%E5%89%8D%E7%AB%AF/5%20js%20BOM/"/>
    <id>http://yoursite.com/2021/08/22/%E5%89%8D%E7%AB%AF/5%20js%20BOM/</id>
    <published>2021-08-21T16:00:00.000Z</published>
    <updated>2021-08-29T11:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js-bom"><a class="markdownIt-Anchor" href="#js-bom"></a> js BOM</h2><h3 id="1-bom概述"><a class="markdownIt-Anchor" href="#1-bom概述"></a> 1. BOM概述</h3><a id="more"></a><h4 id="11-什么是bom"><a class="markdownIt-Anchor" href="#11-什么是bom"></a> 1.1 什么是BOM</h4><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p><p><strong>DOM</strong></p><ul><li><p>文档对象模型</p></li><li><p>DOM 就是把「文档」当做一个「对象」来看待</p></li><li><p>DOM 的顶级对象是 document</p></li><li><p>DOM 主要学习的是操作页面元素</p></li><li><p>DOM 是 W3C 标准规范</p></li></ul><p><strong>BOM</strong></p><ul><li><p>浏览器对象模型</p></li><li><p>把「浏览器」当做一个「对象」来看待</p></li><li><p>BOM 的顶级对象是 window</p></li><li><p>BOM 学习的是浏览器窗口交互的一些对象</p></li><li><p>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</p></li></ul><h4 id="12-bom的构成"><a class="markdownIt-Anchor" href="#12-bom的构成"></a> 1.2 BOM的构成</h4><p><img src="https://i.loli.net/2021/08/29/sm7kTpJMAP4LZCg.png" alt="1.png" /></p><h3 id="2-window-对象的常见事件"><a class="markdownIt-Anchor" href="#2-window-对象的常见事件"></a> 2. window 对象的常见事件</h3><h4 id="21-窗口加载事件"><a class="markdownIt-Anchor" href="#21-窗口加载事件"></a> 2.1 窗口加载事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">或者 </span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>window.onload 是窗口 (页面）加载事件,当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p><p><strong>注意</strong></p><ol><li><p>有了 window.onload 就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全部加载完毕，再去执行处理函数。</p></li><li><p>window.onload 传统注册事件方式 只能写一次，如果有多个，会以最后一个 window.onload 为准。</p></li><li><p>如果使用 addEventListener 则没有限制</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p><h4 id="22-调整窗口大小事件"><a class="markdownIt-Anchor" href="#22-调整窗口大小事件"></a> 2.2 调整窗口大小事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>window.onresize 是调整窗口大小加载事件, 当触发时就调用的处理函数。</p><p><strong>注意：</strong></p><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p></li></ol><h3 id="3-定时器"><a class="markdownIt-Anchor" href="#3-定时器"></a> 3. 定时器</h3><h4 id="31-settimeout"><a class="markdownIt-Anchor" href="#31-settimeout"></a> 3.1 setTimeout</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setTimeout(调用函数, [延迟的毫秒数]);</span><br></pre></td></tr></table></figure><p>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><p><strong>注意</strong></p><ol><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li></ol><h4 id="32-cleartimeout"><a class="markdownIt-Anchor" href="#32-cleartimeout"></a> 3.2 clearTimeout</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearTimeout(timeoutID)</span><br></pre></td></tr></table></figure><p>clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</p><h4 id="33-setinterval"><a class="markdownIt-Anchor" href="#33-setinterval"></a> 3.3 setInterval</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setInterval(回调函数, [间隔的毫秒数]);</span><br></pre></td></tr></table></figure><p>setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p><h4 id="34-clearinterval"><a class="markdownIt-Anchor" href="#34-clearinterval"></a> 3.4 clearInterval</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.clearInterval(intervalID);</span><br></pre></td></tr></table></figure><p>clearInterval()方法取消了先前通过调用 setInterval()建立的定时器。</p><p><strong>例：发送短信</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn1'</span>);</span><br><span class="line">btn.disabled = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> time = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        btn.disabled = <span class="literal">false</span>;</span><br><span class="line">        btn.innerHTML = <span class="string">'获取验证码'</span>;</span><br><span class="line">        time = <span class="number">60</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        btn.innerHTML = time + <span class="string">'s'</span>;</span><br><span class="line">        time--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="4-js-执行机制"><a class="markdownIt-Anchor" href="#4-js-执行机制"></a> 4. JS 执行机制</h3><h4 id="41-同步任务"><a class="markdownIt-Anchor" href="#41-同步任务"></a> 4.1 同步任务</h4><p>同步任务都在主线程上执行，形成一个执行栈。</p><h4 id="42-异步任务"><a class="markdownIt-Anchor" href="#42-异步任务"></a> 4.2 异步任务</h4><p>JS 的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型:</p><p>1、普通事件，如 click、resize 等</p><p>2、资源加载，如 load、error 等</p><p>3、定时器，包括 setInterval、setTimeout 等</p><p>异步任务相关回调函数添加到<strong>任务队列</strong>中（任务队列也称为消息队列）。</p><h4 id="43-执行机制"><a class="markdownIt-Anchor" href="#43-执行机制"></a> 4.3 执行机制</h4><ol><li><p>先执行执行栈中的同步任务。</p></li><li><p>异步任务（回调函数）放入任务队列中。</p></li><li><p>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p><p><img src="https://i.loli.net/2021/08/29/6IoeB4v8srmWjih.png" alt="2.png" /></p></li></ol><p><img src="https://i.loli.net/2021/08/29/P8au3RyM5Ubt4ze.png" alt="3.png" /></p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h3 id="5-location对象"><a class="markdownIt-Anchor" href="#5-location对象"></a> 5. location对象</h3><h4 id="51-location对象"><a class="markdownIt-Anchor" href="#51-location对象"></a> 5.1 location对象</h4><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><h4 id="52-url"><a class="markdownIt-Anchor" href="#52-url"></a> 5.2 URL</h4><p>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protocol:<span class="comment">//host[:port]/path/[?query]#fragment</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//www.itcast.cn/index.html?name=andy&amp;age=18#link</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/29/lm7IQnF8xA9RvKB.png" alt="4.png" /></p><h4 id="53-location-对象的属性"><a class="markdownIt-Anchor" href="#53-location-对象的属性"></a> 5.3 location 对象的属性</h4><p><img src="https://i.loli.net/2021/08/29/AX5Csl1nI7vKWoc.png" alt="5.png" /></p><p><strong>例：页面间数据传递</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.html"</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> params = location.search.substr(<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> arr = params.split(<span class="string">'='</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">        div.innerHTML = arr[<span class="number">1</span>] + <span class="string">'欢迎你'</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="54-location-对象的方法"><a class="markdownIt-Anchor" href="#54-location-对象的方法"></a> 5.4 location 对象的方法</h4><p><img src="https://i.loli.net/2021/08/29/XWSG6flriHUy9w4.png" alt="6.png" /></p><ul><li><p>assign记录浏览历史，可以后退</p></li><li><p>replace不可以后退</p></li></ul><h3 id="6-navigator-对象"><a class="markdownIt-Anchor" href="#6-navigator-对象"></a> 6. navigator 对象</h3><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p><p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">""</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">""</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="7-history-对象"><a class="markdownIt-Anchor" href="#7-history-对象"></a> 7. history 对象</h3><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的 URL。</p><p><img src="https://i.loli.net/2021/08/29/lbWxZGBwA7fae5D.png" alt="7.png" /></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js-bom&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js-bom&quot;&gt;&lt;/a&gt; js BOM&lt;/h2&gt;
&lt;h3 id=&quot;1-bom概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-bom概述&quot;&gt;&lt;/a&gt; 1. BOM概述&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>4 js 事件高级</title>
    <link href="http://yoursite.com/2021/08/15/%E5%89%8D%E7%AB%AF/4%20js%20%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2021/08/15/%E5%89%8D%E7%AB%AF/4%20js%20%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</id>
    <published>2021-08-14T16:00:00.000Z</published>
    <updated>2021-08-29T11:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js-事件高级"><a class="markdownIt-Anchor" href="#js-事件高级"></a> js 事件高级</h2><h3 id="1-注册事件"><a class="markdownIt-Anchor" href="#1-注册事件"></a> 1. 注册事件</h3><a id="more"></a><p>注册事件有两种方式：传统方式和方法监听注册方式</p><h4 id="11-传统注册方式"><a class="markdownIt-Anchor" href="#11-传统注册方式"></a> 1.1 传统注册方式</h4><ul><li><p>利用 on 开头的事件 onclick</p></li><li><p>&lt;button onclick=“alert(‘hi~’)”&gt;&lt;/button&gt;</p></li><li><p>btn.onclick = function() {}</p></li><li><p>特点： 注册事件的<strong>唯一性</strong></p></li><li><p>同一个元素同一个事件只能设置一个处理函数，<strong>最后注册的处理函数将会覆盖前面注册的处理函数</strong></p></li></ul><h4 id="12-addeventlistener事件监听方式"><a class="markdownIt-Anchor" href="#12-addeventlistener事件监听方式"></a> 1.2 addEventListener事件监听方式</h4><ul><li><p>addEventListener() 它是一个方法</p></li><li><p>特点：<strong>同一个元素同一个事件可以注册多个监听器</strong>，按注册顺序依次执行</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.addEventListener(type, listener[, useCapture])</span><br></pre></td></tr></table></figure><p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><ul><li><p>type：事件类型是字符串，比如 click 、mouseover ，注意这里不要带 on</p></li><li><p>listener：事件处理函数，事件发生时，会调用该监听函数</p></li><li><p>useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</p></li></ul><h4 id="13-attachevent事件监听方式"><a class="markdownIt-Anchor" href="#13-attachevent事件监听方式"></a> 1.3 attachEvent事件监听方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.attachEvent(eventNameWithOn, callback)</span><br></pre></td></tr></table></figure><p>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><p>该方法接收两个参数：</p><ul><li><p>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</p></li><li><p>callback： 事件处理函数，当目标触发事件时回调函数被调用</p></li></ul><h3 id="2-删除事件"><a class="markdownIt-Anchor" href="#2-删除事件"></a> 2. 删除事件</h3><h4 id="21-传统注册方式"><a class="markdownIt-Anchor" href="#21-传统注册方式"></a> 2.1 传统注册方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.onclick = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="22-方法监听注册方式"><a class="markdownIt-Anchor" href="#22-方法监听注册方式"></a> 2.2 方法监听注册方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.removeEventListener(type, listener[, useCapture]);</span><br><span class="line">eventTarget.detachEvent(eventNameWithOn, callback);</span><br></pre></td></tr></table></figure><h3 id="3-dom事件流"><a class="markdownIt-Anchor" href="#3-dom事件流"></a> 3. DOM事件流</h3><p>事件流描述的是从页面中接收事件的顺序。</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流</p><p>DOM 事件流分为3个阶段：</p><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p></li></ol><p><img src="https://i.loli.net/2021/08/29/sY4qeXgctF2zxSP.png" alt="1.png" /></p><p><strong>注意</strong></p><ol><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</p></li><li><p>onclick 和 attachEvent 只能得到冒泡阶段。</p></li><li><p>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。</p></li><li><p>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</p></li><li><p>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</p></li></ol><h3 id="4-事件对象"><a class="markdownIt-Anchor" href="#4-事件对象"></a> 4. 事件对象</h3><h4 id="41-事件对象"><a class="markdownIt-Anchor" href="#41-事件对象"></a> 4.1 事件对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去。</p><p>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><p>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 event，它有很多属性和方法。</p><h4 id="42-事件对象的常见属性和方法"><a class="markdownIt-Anchor" href="#42-事件对象的常见属性和方法"></a> 4.2 事件对象的常见属性和方法</h4><p><strong>e.target和this的区别</strong></p><p>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</p><p>e.target 是事件触发的元素。</p><p>例：绑ul点li，this指向ul，target指向li</p><p><img src="https://i.loli.net/2021/08/29/pmYqvsZn71OkexM.png" alt="2.png" /></p><h3 id="5-阻止事件冒泡"><a class="markdownIt-Anchor" href="#5-阻止事件冒泡"></a> 5. 阻止事件冒泡</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation()</span><br></pre></td></tr></table></figure><h3 id="6-事件委托"><a class="markdownIt-Anchor" href="#6-事件委托"></a> 6. 事件委托</h3><p><strong>事件委托的原理</strong></p><p><strong><font color="red">不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</font></strong></p><p>例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><p><strong>事件委托的作用</strong></p><p>我们只操作了一次 DOM ，提高了程序的性能。</p><h3 id="7-常用的鼠标事件"><a class="markdownIt-Anchor" href="#7-常用的鼠标事件"></a> 7. 常用的鼠标事件</h3><h4 id="71-常用的鼠标事件"><a class="markdownIt-Anchor" href="#71-常用的鼠标事件"></a> 7.1 常用的鼠标事件</h4><p><img src="https://i.loli.net/2021/08/29/wSmFjEDdh7otIOg.png" alt="3.png" /></p><p><strong>1. 禁止鼠标右键菜单</strong></p><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 禁止鼠标选中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'selectstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="72-鼠标事件对象"><a class="markdownIt-Anchor" href="#72-鼠标事件对象"></a> 7.2 鼠标事件对象</h4><p><img src="https://i.loli.net/2021/08/29/tDrvaywFBu2Vcb8.png" alt="4.png" /></p><p><strong>例：跟随鼠标移动</strong></p><p>① 鼠标不断的移动，使用鼠标移动事件： mousemove</p><p>② 在页面中移动，给document注册事件</p><p>③ 图片要移动距离，而且不占位置，我们使用绝对定位即可</p><p>④ 核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， 把这个x和y坐标做为图片的top和left 值就可以移动图片</p><h3 id="8-常用的键盘事件"><a class="markdownIt-Anchor" href="#8-常用的键盘事件"></a> 8. 常用的键盘事件</h3><h4 id="81-常用键盘事件"><a class="markdownIt-Anchor" href="#81-常用键盘事件"></a> 8.1 常用键盘事件</h4><p><img src="https://i.loli.net/2021/08/29/tsY8zfcICESnNBk.png" alt="5.png" /></p><p>三个事件的执行顺序是： keydown → keypress → keyup</p><h4 id="82-键盘事件对象"><a class="markdownIt-Anchor" href="#82-键盘事件对象"></a> 8.2 键盘事件对象</h4><p><img src="https://i.loli.net/2021/08/29/mZIKtMUwDyQ9dsr.png" alt="6.png" /></p><p>onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写。</p><p><strong>例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.search</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        width: 178px;</span><br><span class="line">        margin: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.con</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: -40px;</span><br><span class="line">        width: 171px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.2</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.2</span>);</span></span><br><span class="line">        padding: 5px 0;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.con</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">        content: '';</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 28px;</span><br><span class="line">        left: 18px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 8<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        border-style: solid dashed dashed;</span><br><span class="line"><span class="css">        <span class="selector-tag">border-color</span>: <span class="selector-id">#fff</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"con"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的快递单号"</span> <span class="attr">class</span>=<span class="string">"jd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 快递单号输入内容时， 上面的大号字体盒子（con）显示(这里面的字号更大）</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 表单检测用户输入： 给表单添加键盘事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 同时把快递单号里面的值（value）获取过来赋值给 con盒子（innerText）做为内容</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果快递单号里面内容为空，则隐藏大号字体盒子(con)盒子</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> con = <span class="built_in">document</span>.querySelector(<span class="string">'.con'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> jd_input = <span class="built_in">document</span>.querySelector(<span class="string">'.jd'</span>);</span></span><br><span class="line"><span class="actionscript">        jd_input.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log('输入内容啦');</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    con.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    con.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="actionscript">                    con.innerText = <span class="keyword">this</span>.value;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="comment">// 当我们失去焦点，就隐藏这个con盒子</span></span></span><br><span class="line"><span class="actionscript">        jd_input.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                con.style.display = <span class="string">'none'</span>;</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="comment">// 当我们获得焦点，就显示这个con盒子</span></span></span><br><span class="line"><span class="actionscript">        jd_input.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.value !== <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                con.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js-事件高级&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js-事件高级&quot;&gt;&lt;/a&gt; js 事件高级&lt;/h2&gt;
&lt;h3 id=&quot;1-注册事件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-注册事件&quot;&gt;&lt;/a&gt; 1. 注册事件&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>3 js DOM操作</title>
    <link href="http://yoursite.com/2021/08/08/%E5%89%8D%E7%AB%AF/3%20js%20DOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/08/08/%E5%89%8D%E7%AB%AF/3%20js%20DOM%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-07T16:00:00.000Z</published>
    <updated>2021-08-29T10:59:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js-dom操作"><a class="markdownIt-Anchor" href="#js-dom操作"></a> js DOM操作</h2><h3 id="1-获取元素"><a class="markdownIt-Anchor" href="#1-获取元素"></a> 1. 获取元素</h3><a id="more"></a><h4 id="11-根据-id-获取"><a class="markdownIt-Anchor" href="#11-根据-id-获取"></a> 1.1 根据 ID 获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure><p>使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><h4 id="12-根据标签名获取"><a class="markdownIt-Anchor" href="#12-根据标签名获取"></a> 1.2 根据标签名获取</h4><p>返回带有指定标签名的对象的集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'标签名'</span>);</span><br></pre></td></tr></table></figure><ul><li><p>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</p></li><li><p>得到元素对象是动态的</p></li></ul><p>还可以获取某个元素(父元素)内部所有指定标签名的子元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ol = <span class="built_in">document</span>.getElementById(<span class="string">'ol'</span>);</span><br><span class="line"><span class="keyword">var</span> li = ol.getElementsByTagName(<span class="string">'li'</span>);</span><br></pre></td></tr></table></figure><h4 id="13-通过-html5-新增的方法获取"><a class="markdownIt-Anchor" href="#13-通过-html5-新增的方法获取"></a> 1.3 通过 HTML5 新增的方法获取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">document</span>.getElementsByClassName(‘类名’)；<span class="comment">// 根据类名返回元素对象集合</span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">document</span>.querySelector(<span class="string">'选择器'</span>);        <span class="comment">// 根据指定选择器返回第一个元素对象</span></span><br><span class="line"><span class="number">3.</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">'选择器'</span>);     <span class="comment">// 根据指定选择器返回</span></span><br></pre></td></tr></table></figure><p>querySelector 和 querySelectorAll里面的选择器需要加符号,比如:document.querySelector(‘#nav’);</p><h4 id="14-获取特殊元素bodyhtml"><a class="markdownIt-Anchor" href="#14-获取特殊元素bodyhtml"></a> 1.4 获取特殊元素（body，html）</h4><p>获取body元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> doucumnet.body  <span class="comment">// 返回body元素对象</span></span><br></pre></td></tr></table></figure><p>获取html元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">document</span>.documentElement  <span class="comment">// 返回html元素对象</span></span><br></pre></td></tr></table></figure><h3 id="2-事件"><a class="markdownIt-Anchor" href="#2-事件"></a> 2. 事件</h3><ol><li><p>获取事件源</p></li><li><p>注册事件（绑定事件）</p></li><li><p>添加事件处理程序（采取函数赋值形式）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'你好吗'</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-操作元素"><a class="markdownIt-Anchor" href="#3-操作元素"></a> 3. 操作元素</h3><h4 id="31-改变元素内容"><a class="markdownIt-Anchor" href="#31-改变元素内容"></a> 3.1 改变元素内容</h4><p>从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.innerText = <span class="string">'无法加粗'</span>;</span><br></pre></td></tr></table></figure><p>起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.innerHTML = <span class="string">'&lt;strong&gt;加粗&lt;/strong&gt;'</span>;</span><br></pre></td></tr></table></figure><ul><li>两种都可读写</li></ul><h4 id="32-样式属性操作"><a class="markdownIt-Anchor" href="#32-样式属性操作"></a> 3.2 样式属性操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. element.style     行内样式操作</span><br><span class="line">2. element.className 类名样式操作</span><br></pre></td></tr></table></figure><ul><li>js 里面的样式采取驼峰命名法 比如 fontSize、 backgroundColor</li><li>js 修改 style 样式操作，产生的是行内样式，CSS 权重比较高</li></ul><p><strong>例：循环精灵图</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 让索引号 乘以 44 就是每个li 的背景y坐标 index就是我们的y坐标</span></span><br><span class="line">    <span class="keyword">var</span> index = i * <span class="number">44</span>;</span><br><span class="line">    lis[i].style.backgroundPosition = <span class="string">'0 -'</span> + index + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>例：通过类名修改样式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .change &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt; </span></span><br><span class="line"><span class="regexp">var test = document.querySelector('div');</span></span><br><span class="line"><span class="regexp">test.onclick = function() &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 让当前元素类名改为change</span></span><br><span class="line"><span class="regexp">this.className = 'change';</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ul><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ul><h4 id="33-排他思想"><a class="markdownIt-Anchor" href="#33-排他思想"></a> 3.3 排他思想</h4><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">            btns[i].style.backgroundColor = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'pink'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="34-自定义属性值"><a class="markdownIt-Anchor" href="#34-自定义属性值"></a> 3.4 自定义属性值</h4><ol><li>获取属性值</li></ol><p>element.属性  获取属性值。</p><p>element.getAttribute(‘属性’);</p><p><strong>区别</strong></p><ul><li><p>element.属性  获取内置属性值（元素本身自带的属性）</p></li><li><p>element.getAttribute(‘属性’);  主要获得自定义的属性 （标准） 我们程序员自定义的属性</p></li></ul><ol start="2"><li><p>设置属性值</p><p>element.setAttribute(‘属性’, ‘值’);</p></li><li><p>移除属性</p><p>element.removeAttribute(‘属性’);</p></li></ol><h4 id="35-h5自定义属性"><a class="markdownIt-Anchor" href="#35-h5自定义属性"></a> 3.5 H5自定义属性</h4><ol><li><p>设置H5自定义属性</p><p>H5规定自定义属性data-开头做为属性名并且赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如 &lt;div data-index=<span class="string">"1"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取H5自定义属性</p><p>兼容性获取  element.getAttribute(‘data-index’);</p><p>H5新增 element.dataset.index 或者 element.dataset[‘index’]  ie 11才开始支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果自定义属性里面又多个-链接的单词，获取的时候采取驼峰命名法</span></span><br><span class="line">div.dataset.listName;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-节点"><a class="markdownIt-Anchor" href="#4-节点"></a> 4. 节点</h3><h4 id="41-节点概述"><a class="markdownIt-Anchor" href="#41-节点概述"></a> 4.1 节点概述</h4><p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li><p>元素节点  nodeType 为 1</p></li><li><p>属性节点 nodeType 为 2</p></li><li><p>文本节点 nodeType 为 3 （文本节点包含文字、空格、换行等）</p></li></ul><h4 id="42-节点层级"><a class="markdownIt-Anchor" href="#42-节点层级"></a> 4.2 节点层级</h4><p><strong>1. 父级节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.parentNode</span><br></pre></td></tr></table></figure><p>​返回最近的一个父节点</p><p><strong>2. 子节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> parentNode.childNodes</span><br></pre></td></tr></table></figure><p>​返回值里面包含了所有的子节点，包括元素节点，文本节点等。</p><p>​如果只想要获得里面的元素节点，则需要专门处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>. querySelector(‘ul’);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.childNodes.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ul.childNodes[i].nodeType == <span class="number">1</span>) &#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(ul.childNodes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> parentNode.children</span><br></pre></td></tr></table></figure><p>​parentNode.children 是一个只读属性，返回所有的子元素节点。它只返回子元素节点，其余节点不返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> parentNode.firstChild</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span> parentNode.lastChild</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span> parentNode.firstElementChild</span><br></pre></td></tr></table></figure><p>​firstElementChild  返回第一个子元素节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.</span> parentNode.lastElementChild</span><br></pre></td></tr></table></figure><p>​lastElementChild 返回最后一个子元素节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.</span> parentNode.children[index];</span><br></pre></td></tr></table></figure><p><strong>3. 兄弟节点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> node.nextSibling  </span><br><span class="line"><span class="number">2.</span> node.previousSibling</span><br></pre></td></tr></table></figure><p>​包含所有的节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> nextElementSibling</span><br><span class="line"><span class="number">4.</span> node.previousElementSibling</span><br></pre></td></tr></table></figure><p>​返回元素节点</p><h4 id="43-创建节点"><a class="markdownIt-Anchor" href="#43-创建节点"></a> 4.3 创建节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">'tagName'</span>)</span><br></pre></td></tr></table></figure><h4 id="44-添加节点"><a class="markdownIt-Anchor" href="#44-添加节点"></a> 4.4 添加节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> node.appendChild(child)</span><br></pre></td></tr></table></figure><p>​node.appendChild() 方法将一个节点添加到指定父节点的子节点列表末尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> node.insertBefore(child, 指定元素)</span><br></pre></td></tr></table></figure><p>​node.insertBefore() 方法将一个节点添加到父节点的指定子节点前面</p><h4 id="45-删除节点"><a class="markdownIt-Anchor" href="#45-删除节点"></a> 4.5 删除节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.removeChild(child)</span><br></pre></td></tr></table></figure><p>​node.removeChild() 方法从 DOM 中删除一个子节点，返回删除的节点</p><h4 id="46-复制节点"><a class="markdownIt-Anchor" href="#46-复制节点"></a> 4.6 复制节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.cloneNode()</span><br></pre></td></tr></table></figure><p>​node.cloneNode() 方法返回调用该方法的节点的一个副本</p><p><strong>注意</strong></p><ol><li><p>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点。</p></li><li><p>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点。</p></li></ol><h4 id="47-三种动态创建元素区别"><a class="markdownIt-Anchor" href="#47-三种动态创建元素区别"></a> 4.7 三种动态创建元素区别</h4><ul><li><p>document.write()</p></li><li><p>element.innerHTML</p></li><li><p>document.createElement()</p></li></ul><p><strong>区别</strong></p><ol><li><p>document.write 是直接将内容写入页面的内容流，但是文档流执行完毕，则它**<font color="red">会导致页面全部重绘</font>**</p></li><li><p>innerHTML 是将内容写入某个 DOM 节点，不会导致页面全部重绘</p></li><li><p>innerHTML 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    array.push(<span class="string">'&lt;div style="width:100px; height:2px; border:1px solid blue;"&gt;&lt;/div&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = array.join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></li><li><p>createElement() 创建多个元素效率稍低一点点，但是结构更清晰</p></li></ol><p>总结：不同浏览器下，innerHTML 效率要比 creatElement 高</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js-dom操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js-dom操作&quot;&gt;&lt;/a&gt; js DOM操作&lt;/h2&gt;
&lt;h3 id=&quot;1-获取元素&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-获取元素&quot;&gt;&lt;/a&gt; 1. 获取元素&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>2 js 语法</title>
    <link href="http://yoursite.com/2021/08/02/%E5%89%8D%E7%AB%AF/2%20js%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2021/08/02/%E5%89%8D%E7%AB%AF/2%20js%20%E8%AF%AD%E6%B3%95/</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2021-08-29T12:50:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js-语法"><a class="markdownIt-Anchor" href="#js-语法"></a> js 语法</h2><a id="more"></a><h3 id="1-js-输入输出语句"><a class="markdownIt-Anchor" href="#1-js-输入输出语句"></a> 1. js 输入输出语句</h3><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th><th><strong>归属</strong></th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var name = prompt('输入姓名');</span><br><span class="line">alert(name);</span><br></pre></td></tr></table></figure><h3 id="2-变量"><a class="markdownIt-Anchor" href="#2-变量"></a> 2. 变量</h3><table><thead><tr><th><strong>情况</strong></th><th><strong>说明</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>var age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age  = 10; console.log (age);</td><td>不声明  只赋值</td><td>10</td></tr></tbody></table><h3 id="3-数据类型"><a class="markdownIt-Anchor" href="#3-数据类型"></a> 3. 数据类型</h3><p><strong>JavaScript</strong> **是一种弱类型或者说动态语言。**这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;<span class="comment">// 数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">'是的'</span>;   <span class="comment">// 字符型</span></span><br></pre></td></tr></table></figure><p>在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。</p><p>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;<span class="comment">// x为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'Bill'</span>;<span class="comment">// x为字符串</span></span><br></pre></td></tr></table></figure><h4 id="31-简单数据类型"><a class="markdownIt-Anchor" href="#31-简单数据类型"></a> 3.1 简单数据类型</h4><p><img src="https://i.loli.net/2021/08/02/TLO1IPRhJjqaHVG.png" alt="1.png" /></p><h5 id="311-数字型三个特殊值"><a class="markdownIt-Anchor" href="#311-数字型三个特殊值"></a> 3.1.1 数字型三个特殊值</h5><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul><h5 id="314-undefined-和-null"><a class="markdownIt-Anchor" href="#314-undefined-和-null"></a> 3.1.4 Undefined 和 Null</h5><p>一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable);<span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你好'</span> + variable);   <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable);<span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable);<span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure><p>一个声明变量给 null 值，里面存的值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你好'</span> + vari);  <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + vari);      <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + vari);    <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><h4 id="32-typeof"><a class="markdownIt-Anchor" href="#32-typeof"></a> 3.2 typeof</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number</span></span><br></pre></td></tr></table></figure><h4 id="33-数据类型转换"><a class="markdownIt-Anchor" href="#33-数据类型转换"></a> 3.3 数据类型转换</h4><p><img src="https://i.loli.net/2021/08/02/hpMuOKcFIlHgiP5.png" alt="2.png" /></p><p><img src="https://i.loli.net/2021/08/02/oxbztX2KLRn3VJ8.png" alt="3.png" /></p><h3 id="4-运算符"><a class="markdownIt-Anchor" href="#4-运算符"></a> 4. 运算符</h3><h4 id="41-浮点数的精度问题"><a class="markdownIt-Anchor" href="#41-浮点数的精度问题"></a> 4.1 浮点数的精度问题</h4><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;    <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);   <span class="comment">// 结果不是 7，  而是：7.000000000000001</span></span><br></pre></td></tr></table></figure><p>不能直接判断两个浮点数是否相等 !</p><h4 id="42-比较运算符"><a class="markdownIt-Anchor" href="#42-比较运算符"></a> 4.2 比较运算符</h4><p><img src="https://i.loli.net/2021/08/02/BRNKEaCLf1QqXGr.png" alt="4.png" /></p><h4 id="43-逻辑运算符短路运算"><a class="markdownIt-Anchor" href="#43-逻辑运算符短路运算"></a> 4.3 逻辑运算符（短路运算）</h4><p>**短路运算的原理：**当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值。</p><h5 id="1-逻辑与"><a class="markdownIt-Anchor" href="#1-逻辑与"></a> 1. 逻辑与</h5><ul><li><p>语法： <font color="red">表达式1 &amp;&amp; 表达式2</font></p></li><li><p>如果第一个表达式的值为真，则返回表达式2</p></li><li><p>如果第一个表达式的值为假，则返回表达式1</p></li></ul><h5 id="2-逻辑或"><a class="markdownIt-Anchor" href="#2-逻辑或"></a> 2. 逻辑或</h5><ul><li><p>语法： <font color="red">表达式1 || 表达式2</font></p></li><li><p>如果第一个表达式的值为真，则返回表达式1</p></li><li><p>如果第一个表达式的值为假，则返回表达式2</p></li></ul><h4 id="44-运算符优先级"><a class="markdownIt-Anchor" href="#44-运算符优先级"></a> 4.4 运算符优先级</h4><p><img src="https://i.loli.net/2021/08/02/C4nlscPOirNQXJZ.png" alt="5.png" /></p><h3 id="5-数组"><a class="markdownIt-Anchor" href="#5-数组"></a> 5. 数组</h3><h4 id="51-创建数组"><a class="markdownIt-Anchor" href="#51-创建数组"></a> 5.1 创建数组</h4><ul><li><p>利用 new 创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></li><li><p>利用数组字面量创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span>  arr = [<span class="string">'小白'</span>,<span class="string">'小黑'</span>,<span class="string">'大黄'</span>,<span class="string">'瑞奇'</span>];</span><br><span class="line"></span><br><span class="line">#### 5.2 数组新增元素</span><br><span class="line"></span><br><span class="line">- 通过修改 length 长度新增数组元素，length 是可读写的</span><br><span class="line"></span><br><span class="line">  <span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">  var arr = ['red', 'green', 'blue', 'pink'];</span></span><br><span class="line"><span class="string">  arr.length = 7;</span></span><br></pre></td></tr></table></figure></li><li><p>通过修改数组索引新增数组元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'pink'</span>];</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">'hotpink'</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-函数"><a class="markdownIt-Anchor" href="#6-函数"></a> 6. 函数</h3><h4 id="61-函数参数"><a class="markdownIt-Anchor" href="#61-函数参数"></a> 6.1 函数参数</h4><p><img src="https://i.loli.net/2021/08/02/rhd9Uqo72QSvbkG.png" alt="6.png" /></p><h4 id="62-函数返回值"><a class="markdownIt-Anchor" href="#62-函数返回值"></a> 6.2 函数返回值</h4><ul><li>如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="63-arguments"><a class="markdownIt-Anchor" href="#63-arguments"></a> 6.3 arguments</h4><p>当我们不确定有多少个参数传递的时候，可以用 <strong>arguments</strong> 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个 arguments 对象，<strong>arguments 对象中存储了传递的所有实参</strong>。</p><p><strong>arguments展示形式是一个伪数组</strong>，因此可以进行遍历。伪数组具有以下特点：</p><ul><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push , pop 等方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">                    max = <span class="built_in">arguments</span>[i];</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>));</span><br><span class="line"> <span class="built_in">console</span>.log(maxValue(<span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>));</span><br></pre></td></tr></table></figure><h4 id="64-函数声明方式"><a class="markdownIt-Anchor" href="#64-函数声明方式"></a> 6.4 函数声明方式</h4><ul><li><p>命名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用  </span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li></ul><h4 id="65-立即执行函数"><a class="markdownIt-Anchor" href="#65-立即执行函数"></a> 6.5 立即执行函数</h4><p>不需要调用，立马能够自己执行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)()</span><br><span class="line"><span class="number">2.</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;());</span><br></pre></td></tr></table></figure><p>主要作用：创建一个独立的作用域，避免了命名冲突问题</p><h3 id="7-作用域"><a class="markdownIt-Anchor" href="#7-作用域"></a> 7. 作用域</h3><ul><li>js 没有块作用域</li><li>用 var 在函数内创建局部变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn() &#123;</span><br><span class="line">    a = b = c = <span class="number">10</span>;<span class="comment">// a, b, c为全局变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-预解析"><a class="markdownIt-Anchor" href="#8-预解析"></a> 8. 预解析</h3><p><strong>|预解析|</strong>：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// undifined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();<span class="comment">// 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();<span class="comment">// undifined</span></span><br><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line">fn();</span><br><span class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-对象"><a class="markdownIt-Anchor" href="#9-对象"></a> 9. 对象</h3><h4 id="91-利用字面量创建对象"><a class="markdownIt-Anchor" href="#91-利用字面量创建对象"></a> 9.1 利用字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">'Jaron'</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">'男'</span>,</span><br><span class="line">    sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'嗷呜~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="92-利用new-object创建对象"><a class="markdownIt-Anchor" href="#92-利用new-object创建对象"></a> 9.2 利用new Object创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> Obect();</span><br><span class="line">andy.name = <span class="string">'Jaron'</span>;</span><br><span class="line">andy.age = <span class="number">18</span>;</span><br><span class="line">andy.sex = <span class="string">'男'</span>;</span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'嗷呜~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="93-利用构造函数创建对象"><a class="markdownIt-Anchor" href="#93-利用构造函数创建对象"></a> 9.3 利用构造函数创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">     <span class="keyword">this</span>.sex = sex;</span><br><span class="line">     <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'我的名字叫：'</span> + <span class="keyword">this</span>.name + <span class="string">'，年龄：'</span> + <span class="keyword">this</span>.age + <span class="string">'，性别：'</span> + <span class="keyword">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bigbai = <span class="keyword">new</span> Person(<span class="string">'大白'</span>, <span class="number">100</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">var</span> smallbai = <span class="keyword">new</span> Person(<span class="string">'小白'</span>, <span class="number">21</span>, <span class="string">'男'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bigbai.name);</span><br><span class="line"><span class="built_in">console</span>.log(smallbai.name);</span><br></pre></td></tr></table></figure><ol><li>构造函数约定首字母大写。</li><li>函数内的属性和方法前面需要添加 this ，表示当前对象的属性和方法。</li><li>构造函数中不需要 return 返回结果。</li><li>当我们创建对象的时候，必须用 new 来调用构造函数。</li></ol><h4 id="94-遍历对象属性"><a class="markdownIt-Anchor" href="#94-遍历对象属性"></a> 9.4 遍历对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-内置对象"><a class="markdownIt-Anchor" href="#10-内置对象"></a> 10. 内置对象</h3><h4 id="101-math-对象"><a class="markdownIt-Anchor" href="#101-math-对象"></a> 10.1 Math 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI    <span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor()     <span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil()            <span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()           <span class="comment">// 四舍五入版 就近取整   注意 -3.5   结果是  -3 </span></span><br><span class="line"><span class="built_in">Math</span>.abs()   <span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min()  <span class="comment">// 求最大和最小值</span></span><br></pre></td></tr></table></figure><h4 id="102-date-对象"><a class="markdownIt-Anchor" href="#102-date-对象"></a> 10.2 Date 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br></pre></td></tr></table></figure><ul><li>如果Date()不写参数，就返回当前时间</li><li>如果Date()里面写参数，就返回括号里面输入的时间</li></ul><p><img src="https://i.loli.net/2021/08/02/JryvZ4H63QsOu7b.png" alt="7.png" /></p><h4 id="103-数组对象"><a class="markdownIt-Anchor" href="#103-数组对象"></a> 10.3 数组对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><h5 id="1031-数组检测"><a class="markdownIt-Anchor" href="#1031-数组检测"></a> 10.3.1 数组检测</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="1032-数组方法"><a class="markdownIt-Anchor" href="#1032-数组方法"></a> 10.3.2 数组方法</h5><p><img src="https://i.loli.net/2021/08/02/oYngFlBaxfe6D9O.png" alt="8.png" /></p><p><strong>sort</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;      <span class="comment">// 降序</span></span><br><span class="line">    <span class="comment">// return a - b;   // 升序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/02/J3hjPanmOCplWVo.png" alt="9.png" /><br /><img src="https://i.loli.net/2021/08/02/iapmJ4zGtb7NKBg.png" alt="10.png" /></p><h4 id="104-字符串对象"><a class="markdownIt-Anchor" href="#104-字符串对象"></a> 10.4 字符串对象</h4><h5 id="1041-基本包装类型"><a class="markdownIt-Anchor" href="#1041-基本包装类型"></a> 10.4.1 基本包装类型</h5><p><strong>|基本包装类型|</strong>：就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'andy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'andy'</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h5 id="1042-字符串的不可变"><a class="markdownIt-Anchor" href="#1042-字符串的不可变"></a> 10.4.2 字符串的不可变</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 当重新给 str 赋值的时候，常量'abc'不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 这个结果需要花费大量时间来显示，因为需要不断的开辟新的空间</span></span><br></pre></td></tr></table></figure><h5 id="1043-字符串方法"><a class="markdownIt-Anchor" href="#1043-字符串方法"></a> 10.4.3 字符串方法</h5><p><img src="https://i.loli.net/2021/08/02/uietF4qzPwZ7jO5.png" alt="11.png" /></p><p>replace() 方法用于在字符串中用一些字符替换另一些字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace(被替换的字符串， 要替换为的字符串)；<span class="comment">// 只替换第一个字符</span></span><br></pre></td></tr></table></figure><p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a,b,c,d'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">','</span>));   <span class="comment">// 返回的是一个数组 [a, b, c, d]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js-语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js-语法&quot;&gt;&lt;/a&gt; js 语法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>1 js 简介</title>
    <link href="http://yoursite.com/2021/08/01/%E5%89%8D%E7%AB%AF/1%20js%20%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2021/08/01/%E5%89%8D%E7%AB%AF/1%20js%20%E7%AE%80%E4%BB%8B/</id>
    <published>2021-07-31T16:00:00.000Z</published>
    <updated>2021-08-29T10:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="js-简介"><a class="markdownIt-Anchor" href="#js-简介"></a> js 简介</h2><h3 id="js简介"><a class="markdownIt-Anchor" href="#js简介"></a> js简介</h3><a id="more"></a><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><h3 id="js书写位置"><a class="markdownIt-Anchor" href="#js书写位置"></a> js书写位置</h3><p>JS有3中书写位置，分别为行内、内嵌、外部</p><p><strong>行内</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">onclick</span>=<span class="string">"alert('2')"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内嵌</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'123'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>外部</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js-简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js-简介&quot;&gt;&lt;/a&gt; js 简介&lt;/h2&gt;
&lt;h3 id=&quot;js简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js简介&quot;&gt;&lt;/a&gt; js简介&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>品优购案例</title>
    <link href="http://yoursite.com/2021/07/21/%E5%89%8D%E7%AB%AF/%E5%93%81%E4%BC%98%E8%B4%AD%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2021/07/21/%E5%89%8D%E7%AB%AF/%E5%93%81%E4%BC%98%E8%B4%AD%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B/</id>
    <published>2021-07-20T16:00:00.000Z</published>
    <updated>2021-07-21T06:52:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="品优购案例"><a class="markdownIt-Anchor" href="#品优购案例"></a> 品优购案例</h2><h3 id="1-品优购项目规划"><a class="markdownIt-Anchor" href="#1-品优购项目规划"></a> 1. 品优购项目规划</h3><a id="more"></a><h4 id="11-网站制作流程"><a class="markdownIt-Anchor" href="#11-网站制作流程"></a> 1.1 网站制作流程</h4><p><img src="https://i.loli.net/2021/07/21/GsT5ncSjfh98wgY.png" alt="网站制作流程.png" /></p><h4 id="12-开发工具及技术栈"><a class="markdownIt-Anchor" href="#12-开发工具及技术栈"></a> 1.2 开发工具及技术栈</h4><p><strong>1. 开发工具</strong></p><p>VScode 、Photoshop（fw）、主流浏览器（以Chrome浏览器为主）</p><p><strong>2. 技术栈</strong></p><ul><li>利用 HTML5 + CSS3 手动布局，可以大量使用 H5 新增标签和样式</li><li>采取结构与样式相分离，模块化开发</li><li>良好的代码规范有利于团队更好的开发协作，提高代码质量，因此品优购项目里面，请同学们遵循以下代 码规范。（详情见— <strong><a href="http://xn--mnqve04pnx6burlnrjs3f.md" target="_blank" rel="noopener">品优购代码规范.md</a></strong>）</li></ul><p>下载链接：<a href="https://jaron-doge-1305669952.cos.ap-beijing.myqcloud.com/Notes/%E5%89%8D%E7%AB%AF/%E5%93%81%E4%BC%98%E8%B4%AD%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83.md" target="_blank" rel="noopener">https://jaron-doge-1305669952.cos.ap-beijing.myqcloud.com/Notes/前端/品优购代码规范.md</a></p><h4 id="13-品优购项目搭建工作"><a class="markdownIt-Anchor" href="#13-品优购项目搭建工作"></a> 1.3 品优购项目搭建工作</h4><p><strong>1. 需要创建如下文件夹：</strong></p><p><img src="https://i.loli.net/2021/07/21/Hx5Y8aAmghQktfl.png" alt="文件夹.png" /></p><p><strong>2. 需要创建如下文件：</strong></p><p><img src="https://i.loli.net/2021/07/21/mM1DgKU7wnaTxbs.png" alt="文件.png" /></p><p><strong>3. 模块化开发</strong></p><ul><li>有些样式和结构在很多页面都会出现，比如页面头部和底部，大部分页面都有。此时，可以把这些结构 和样式单独作为一个模块，然后重复使用</li><li>这里最典型的应用就是 common.css 公共样式。写好一个样式，其余的页面用到这些相同的样式</li><li>模块化开发具有重复使用、修改方便等优点</li></ul><p><img src="https://i.loli.net/2021/07/21/i7VLEpmMThkfdow.png" alt="commonCSS.png" /></p><p>common.css 公共样式里面包含版心宽度、清除浮动、页面文字颜色等公共样式。</p><h4 id="16-网站-favicon-图标"><a class="markdownIt-Anchor" href="#16-网站-favicon-图标"></a> 1.6 网站 favicon 图标</h4><p><strong>一、制作favicon图标</strong></p><ol><li>把品优购图标切成 png 图片。</li><li>把 png 图片转换为 ico 图标。</li></ol><p><strong>二、favicon图标放到网站根目录下</strong></p><p><strong>三、 HTML页面引入favicon图标</strong></p><p>在html 页面里面的 head 元素之间引入代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="shortcut icon" href="favicon.ico" /&gt;</span><br></pre></td></tr></table></figure><h4 id="17-网站tdk三大标签seo优化"><a class="markdownIt-Anchor" href="#17-网站tdk三大标签seo优化"></a> 1.7  网站TDK三大标签SEO优化</h4><p><strong>SEO（Search Engine Optimization）<strong>汉译为</strong>搜索引擎优化</strong>，是一种利用搜索引擎的规则提高网站在有关搜索引擎内自然排名的方式。</p><p>SEO 的目的是<strong>对网站进行深度的优化</strong>，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提高网站的知名度。</p><p>页面必须有三个标签用来符合 SEO 优化。</p><img src="https://i.loli.net/2021/07/21/piLFnxbG7q2XTmu.png" alt="SEO优化.png" style="zoom:80%;" /><p>对于前端人员来说，只需要准备好这三个标签，具体里面的内容，有专门的 SEO 人员准备。</p><h5 id="1-title-网站标题"><a class="markdownIt-Anchor" href="#1-title-网站标题"></a> 1. title 网站标题</h5><p>title 具有不可替代性，是我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主题归属的最佳判 断点。</p><p>建议：<strong>网站名（产品名）- 网站的介绍</strong> （尽量不要超过30个汉字）</p><p>例如：</p><ul><li>京东(<a href="http://JD.COM" target="_blank" rel="noopener">JD.COM</a>)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</li><li>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</li></ul><h5 id="2-description-网站说明"><a class="markdownIt-Anchor" href="#2-description-网站说明"></a> 2. description 网站说明</h5><p>简要说明我们网站主要是做什么的。</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="description" content="京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、</span><br><span class="line">家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物</span><br><span class="line">体验!" /&gt;</span><br></pre></td></tr></table></figure><h5 id="3-keywords-关键字"><a class="markdownIt-Anchor" href="#3-keywords-关键字"></a> 3.  keywords 关键字</h5><p>keywords 是页面关键词，是搜索引擎的关注点之一。</p><p>keywords 最好限制为 6～8 个关键词，关键词之间用英文逗号隔开，采用 关键词1,关键词2 的形式。</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东" /&gt;</span><br></pre></td></tr></table></figure><h3 id="2-品优购首页制作"><a class="markdownIt-Anchor" href="#2-品优购首页制作"></a> 2. 品优购首页制作</h3><h4 id="21-logo-seo优化"><a class="markdownIt-Anchor" href="#21-logo-seo优化"></a> 2.1 LOGO SEO优化</h4><ol><li>logo 里面首先放一个 h1 标签，目的是为了提权，告诉搜索引擎，这个地方很重要。</li><li>h1 里面再放一个链接，可以返回首页的，把 logo 的背景图片给链接即可。</li><li>为了搜索引擎收录我们，我们链接里面要放文字（网站名称），但是文字不要显示出来。<ul><li>方法1：text-indent 移到盒子外面（text-indent: -9999px) ，然后overflow:hidden ，淘宝的做法。</li><li>方法2：直接给 font-size: 0; 就看不到文字了，京东的做法。</li></ul></li><li>最后给链接一个 title 属性，这样鼠标放到 logo 上就可以看到提示文字了。</li></ol><h3 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3. 总结</h3><ul><li>hover显示边框时可以给原盒子先设置透明边框</li><li>溢出的部分用overflow</li></ul><h3 id="4-网站地址"><a class="markdownIt-Anchor" href="#4-网站地址"></a> 4. 网站地址</h3><p><a href="http://www.peregrine.top/test/shopping/index.html" target="_blank" rel="noopener">http://www.peregrine.top/test/shopping/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;品优购案例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#品优购案例&quot;&gt;&lt;/a&gt; 品优购案例&lt;/h2&gt;
&lt;h3 id=&quot;1-品优购项目规划&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-品优购项目规划&quot;&gt;&lt;/a&gt; 1. 品优购项目规划&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>5 HTML5和CSS3新特性</title>
    <link href="http://yoursite.com/2021/07/20/%E5%89%8D%E7%AB%AF/5%20HTML5%E5%92%8CCSS3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2021/07/20/%E5%89%8D%E7%AB%AF/5%20HTML5%E5%92%8CCSS3%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2021-08-29T11:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="html5和css3新特性"><a class="markdownIt-Anchor" href="#html5和css3新特性"></a> HTML5和CSS3新特性</h2><h3 id="1-html5的新特性"><a class="markdownIt-Anchor" href="#1-html5的新特性"></a> 1. HTML5的新特性</h3><a id="more"></a><h4 id="11-html5新增的语义化标签"><a class="markdownIt-Anchor" href="#11-html5新增的语义化标签"></a> 1.1 HTML5新增的语义化标签</h4><ul><li>header：头部标签</li><li>nav：导航标签</li><li>article：内容标签</li><li>section：定义文档某个区域</li><li>aside：侧边栏标签</li><li>footer：尾部标签</li></ul><img src="https://i.loli.net/2021/07/21/SmM4zH56teo8hFx.png" alt="语义化标签.png" style="zoom:80%;" /><h4 id="12-html5-新增的多媒体标签"><a class="markdownIt-Anchor" href="#12-html5-新增的多媒体标签"></a> 1.2 HTML5 新增的多媒体标签</h4><ul><li><p>&lt;audio&gt;：音频</p></li><li><p>&lt;video&gt;：视频</p></li></ul><h5 id="121-视频"><a class="markdownIt-Anchor" href="#121-视频"></a> 1.2.1 视频</h5><img src="https://i.loli.net/2021/07/21/uBnWdxFNgoTLv49.png" alt="video支持格式.png" style="zoom:80%;" /><p><strong>常用属性</strong></p><p><img src="https://i.loli.net/2021/07/21/mWlzqeAB3FCNari.png" alt="video常用属性.png" /></p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 兼容性写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">width</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> &gt;</span></span><br><span class="line">您的浏览器暂不支持 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure><h5 id="122-音频"><a class="markdownIt-Anchor" href="#122-音频"></a> 1.2.2 音频</h5><img src="https://i.loli.net/2021/07/21/mNBvePubMaXr3hI.png" alt="audio支持格式.png" style="zoom:80%;" /><p><strong>常用属性</strong></p><p><img src="https://i.loli.net/2021/07/21/7k29OAvJ5mQf3hC.png" alt="audio常用属性.png" /></p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 兼容性写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"happy.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"happy.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span> &gt;</span></span><br><span class="line">您的浏览器暂不支持 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 标签。</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13-html5-新增的-input-类型"><a class="markdownIt-Anchor" href="#13-html5-新增的-input-类型"></a> 1.3 HTML5 新增的 input 类型</h4><p>验证的时候必须添加form表单域</p><p><img src="https://i.loli.net/2021/07/21/FvgxbzMHa1IAruj.png" alt="新增input表单.png" /></p><h4 id="14-html5-新增的表单属性"><a class="markdownIt-Anchor" href="#14-html5-新增的表单属性"></a> 1.4 HTML5 新增的表单属性</h4><p><img src="https://i.loli.net/2021/07/21/FV1mzHgLOufabSi.png" alt="image-20210718201124525.png" /></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 可以通过以下设置方式修改placeholder里面的字体颜色。 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-css3的新特性"><a class="markdownIt-Anchor" href="#2-css3的新特性"></a> 2. CSS3的新特性</h3><ul><li>属性选择器</li><li>结构伪类选择器</li><li>伪元素选择器</li></ul><h4 id="21-属性选择器"><a class="markdownIt-Anchor" href="#21-属性选择器"></a> 2.1 属性选择器</h4><p><img src="https://i.loli.net/2021/07/21/drmwtCzW8vnOaF9.png" alt="属性选择器.png" /></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"text"</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>类选择器、属性选择器、伪类选择器，<strong>权重为 10</strong>。</p><h4 id="22-结构伪类选择器"><a class="markdownIt-Anchor" href="#22-结构伪类选择器"></a> 2.2 结构伪类选择器</h4><p>结构伪类选择器主要根据文档结构来选择器元素， 常用于根据父级选择器里面的子元</p><p><img src="https://i.loli.net/2021/07/21/WxrlQdfcGuwCTv8.png" alt="结构伪类选择器-01.png" /></p><p><strong>nth-child(n)</strong></p><p>nth-child（n） 选择某个父元素的一个或多个特定的子元素（重点）</p><ul><li>n 可以是数字，关键字和公式</li><li>n 如果是数字，就是选择第 n 个子元素， 里面数字从1开始…</li><li>n 可以是关键字：even 偶数，odd 奇数</li><li>n 可以是公式：常见的公式如下 ( 如果n是公式，则从0开始计算，但是第 0 个元素或者超出了元素的个数会被忽略）</li></ul><p><img src="https://i.loli.net/2021/07/21/JfUacM297QKSrW6.png" alt="nth-child公式.png" /></p><p><strong>区别</strong></p><ol><li><strong>nth-child</strong>：对父元素里面所有孩子排序选择（序号是固定的） 先找到第n个孩子，然后看看是否和E匹配</li><li><strong>nth-of-type</strong>：对父元素里面指定子元素进行排序选择。 先去匹配E ，然后再根据E 找第n个孩子</li></ol><h4 id="23-伪元素选择器"><a class="markdownIt-Anchor" href="#23-伪元素选择器"></a> 2.3 伪元素选择器</h4><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构。</p><p><img src="https://i.loli.net/2021/07/21/Ca5LdDnzmJYUTZv.png" alt="伪元素.png" /></p><ul><li>before 和 after 创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法： element::before {}</li><li><strong>before 和 after 必须有 content 属性</strong></li><li>before 在父元素内容的前面创建元素，after 在父元素内容的后面插入元素</li><li>伪元素选择器和标签选择器一样，<strong>权重为 1</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 权重是2 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong></p><ul><li><p>可以用来配合字体图标</p></li><li><p>可以用来做遮罩层</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rbga</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="24-css3-盒子模型"><a class="markdownIt-Anchor" href="#24-css3-盒子模型"></a> 2.4 CSS3 盒子模型</h4><p>CSS3 中可以通过 <strong>box-sizing</strong> 来指定盒模型，有2个值：即可指定为 <strong>content-box</strong>、<strong>border-box</strong>，这样我们 计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><ol><li>box-sizing: content-box 盒子大小为 width + padding + border （以前默认的）</li><li>box-sizing: border-box 盒子大小为 width</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="25-css3-其他特性"><a class="markdownIt-Anchor" href="#25-css3-其他特性"></a> 2.5 CSS3 其他特性</h4><h5 id="251-css3滤镜filter"><a class="markdownIt-Anchor" href="#251-css3滤镜filter"></a> 2.5.1 CSS3滤镜filter：</h5><p>filter CSS属性将模糊或颜色偏移等图形效果应用于元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* filter: 函数(); */</span> </span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><h5 id="252-css3-calc函数"><a class="markdownIt-Anchor" href="#252-css3-calc函数"></a> 2.5.2 CSS3 calc函数：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(100% <span class="selector-tag">-</span> 80<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>括号里面可以使用 + - * / 来进行计算。</p><h4 id="26-css3-过渡"><a class="markdownIt-Anchor" href="#26-css3-过渡"></a> 2.6 CSS3 过渡</h4><p>过渡动画： 是从一个状态渐渐的过渡到另外一个状态，经常和 :hover 一起搭配使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: 要过渡的属性 花费时间 运动曲线 何时开始;</span><br></pre></td></tr></table></figure><ol><li>属性 ： 想要变化的 css 属性， 宽度高度 背景颜色 内外边距都可以 。如果想要所有的属性都 变化过渡， 写一个all 就可以。</li><li>花费时间： 单位是 秒**（必须写单位）** 比如 0.5s</li><li>运动曲线： 默认是 ease <strong>（可以省略）</strong></li><li>何时开始 ：单位是 秒**（必须写单位）**可以设置延迟触发时间 默认是 0s <strong>（可以省略）</strong></li></ol><p>多个属性用 , 进行分割</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">width</span> 1<span class="selector-tag">s</span> <span class="selector-tag">ease</span> 1<span class="selector-tag">s</span>, <span class="selector-tag">height</span> 1<span class="selector-tag">s</span> <span class="selector-tag">ease</span> 1<span class="selector-tag">s</span>;</span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure><h5 id="261-案例"><a class="markdownIt-Anchor" href="#261-案例"></a> 2.6.1 案例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.header-logo</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 设置a标签的样式 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ff6700</span>;</span></span><br><span class="line">            text-align: left;</span><br><span class="line">            text-indent: -9999em;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* mi logo的样式 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 定位 */</span></span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="comment">/* 伪元素必须要设置content属性 */</span></span></span><br><span class="line">            content: '';</span><br><span class="line"><span class="css">            <span class="comment">/* 左偏移 */</span></span></span><br><span class="line">            left: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* 上偏移 */</span></span></span><br><span class="line">            top: 0;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置过渡 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 背景图片 */</span></span></span><br><span class="line">            background: url(./images/mi-logo.png) no-repeat center center;</span><br><span class="line"><span class="css">            <span class="comment">/* 透明度 */</span></span></span><br><span class="line">            opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* mi home 的样式 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            content: '';</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            width: 55px;</span><br><span class="line">            height: 55px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span>;</span></span><br><span class="line">            background: url(./images/mi-home.png) no-repeat center center;</span><br><span class="line">            margin-left: -55px;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 鼠标移入 让mi logo 往右侧进行滑动 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">            opacity: 0;</span><br><span class="line">            margin-left: 55px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 鼠标移入 让mi home 回到盒子中间 */</span></span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            opacity: 1;</span><br><span class="line">            margin-left: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-logo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"logo"</span> <span class="attr">title</span>=<span class="string">"小米官网"</span>&gt;</span>小米官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html5和css3新特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#html5和css3新特性&quot;&gt;&lt;/a&gt; HTML5和CSS3新特性&lt;/h2&gt;
&lt;h3 id=&quot;1-html5的新特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-html5的新特性&quot;&gt;&lt;/a&gt; 1. HTML5的新特性&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>4 CSS高级技巧</title>
    <link href="http://yoursite.com/2021/07/19/%E5%89%8D%E7%AB%AF/4%20CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2021/07/19/%E5%89%8D%E7%AB%AF/4%20CSS%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</id>
    <published>2021-07-18T16:00:00.000Z</published>
    <updated>2021-08-29T10:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="css高级技巧"><a class="markdownIt-Anchor" href="#css高级技巧"></a> CSS高级技巧</h2><h3 id="1-精灵图"><a class="markdownIt-Anchor" href="#1-精灵图"></a> 1. 精灵图</h3><a id="more"></a><p>有效地减少服务器接收和发送请求的次数，提高页面的加载速度</p><h4 id="11-精灵图的使用"><a class="markdownIt-Anchor" href="#11-精灵图的使用"></a> 1.1 精灵图的使用</h4><ol><li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中。</li><li>这个大图片也称为 sprites 精灵图</li><li>移动背景图片位置， 此时可以使用 background-position 。</li><li>移动的距离就是这个目标图片的 x 和 y 坐标。注意网页中的坐标有所不同</li><li>因为一般情况下都是往上往左移动，所以数值是负值。</li><li>使用精灵图的时候需要精确测量，每个小背景图片的大小和位置。</li></ol> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./images/sprites.png) no-repeat -<span class="number">182px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字体图标"><a class="markdownIt-Anchor" href="#2-字体图标"></a> 2. 字体图标</h3><p>字体图标使用场景： 主要用于显示网页中通用、常用的一些小图标</p><p>字体图标可以为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</p><h4 id="21-优点"><a class="markdownIt-Anchor" href="#21-优点"></a> 2.1 优点</h4><ul><li><p>轻量级</p></li><li><p>灵活性</p></li><li><p>兼容性</p></li></ul><h4 id="22-字体图标的引入"><a class="markdownIt-Anchor" href="#22-字体图标的引入"></a> 2.2 字体图标的引入</h4><p>通过css将字体图标引入（到阿里巴巴矢量图库上复制代码）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"iconfont"</span>; <span class="comment">/* Project id 2682552 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'http://at.alicdn.com/t/font_2682552_i74b4euo3zg.woff2?t=1626590070178'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">'http://at.alicdn.com/t/font_2682552_i74b4euo3zg.woff?t=1626590070178'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">'http://at.alicdn.com/t/font_2682552_i74b4euo3zg.ttf?t=1626590070178'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"iconfont"</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-sousuo_huaban1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"\e60d"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-css三角"><a class="markdownIt-Anchor" href="#3-css三角"></a> 3. CSS三角</h3><p>三边设置透明，一边有颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line"> <span class="attribute">border-left-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="31-案例"><a class="markdownIt-Anchor" href="#31-案例"></a> 3.1 案例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.jd</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">249px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="selector-class">.jd</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-用户界面样式"><a class="markdownIt-Anchor" href="#4-用户界面样式"></a> 4. 用户界面样式</h3><h4 id="41-鼠标样式cursor"><a class="markdownIt-Anchor" href="#41-鼠标样式cursor"></a> 4.1 鼠标样式cursor</h4><p>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/LjC4XIKGqAR3QFV.png" alt="1571521805183.png" /></p><h4 id="42-轮廓线-outline"><a class="markdownIt-Anchor" href="#42-轮廓线-outline"></a> 4.2 轮廓线 outline</h4><p>给表单添加 outline: 0; 或者 outline: none; 样式之后，就可以去掉默认的蓝色边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="43-防止拖拽文本域-resize"><a class="markdownIt-Anchor" href="#43-防止拖拽文本域-resize"></a> 4.3  防止拖拽文本域 resize</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>&#123; <span class="attribute">resize</span>: none;&#125;</span><br></pre></td></tr></table></figure><p>注：文本域尽量放到一行，不然首字会有空隙</p><h3 id="5-vertical-align"><a class="markdownIt-Anchor" href="#5-vertical-align"></a> 5. vertical-align</h3><p>经常用于设置图片或者表单(行内块元素）和文字垂直对齐。</p><p>用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align : baseline | top | middle | bottom</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/KXMGtqLyEDH5VNf.png" alt="1571522023413.png" /></p><img src="https://i.loli.net/2021/07/21/OqobtJjlnQGi63A.png" alt="1571522040645.png" style="zoom:80%;" /><h4 id="51-图片和文字垂直居中"><a class="markdownIt-Anchor" href="#51-图片和文字垂直居中"></a> 5.1 图片和文字垂直居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="52-解决图片底部默认空白缝隙问题"><a class="markdownIt-Anchor" href="#52-解决图片底部默认空白缝隙问题"></a> 5.2 解决图片底部默认空白缝隙问题</h4><p>图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p><p><strong>解决方法</strong></p><ol><li>给图片添加 vertical-align: middle | top| bottom（提倡使用的）</li><li>把图片转换为块级元素 display: block;</li></ol><h3 id="6-溢出的文字省略号显示"><a class="markdownIt-Anchor" href="#6-溢出的文字省略号显示"></a> 6. 溢出的文字省略号显示</h3><h4 id="1-单行文本溢出显示省略号"><a class="markdownIt-Anchor" href="#1-单行文本溢出显示省略号"></a> 1. 单行文本溢出显示省略号</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line"> white-space: nowrap; （ 默认 normal 自动换行）</span><br><span class="line"> <span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line"> overflow: hidden;</span><br><span class="line"> <span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line"> text-overflow: ellipsis;</span><br></pre></td></tr></table></figure><h4 id="2-多行文本溢出显示省略号"><a class="markdownIt-Anchor" href="#2-多行文本溢出显示省略号"></a> 2. 多行文本溢出显示省略号</h4><p>多行文本溢出显示省略号，有较大兼容性问题， 适合于webkit浏览器或移动端（移动端大部分是webkit内核）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br></pre></td></tr></table></figure><h3 id="7-常见布局技巧"><a class="markdownIt-Anchor" href="#7-常见布局技巧"></a> 7. 常见布局技巧</h3><h4 id="71-margin负值运用"><a class="markdownIt-Anchor" href="#71-margin负值运用"></a> 7.1 margin负值运用</h4><ol><li>让每个盒子margin 往左侧移动 -1px 正好压住相邻盒子边框</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有有定位，则加相对定位（保留位置），如 果有定位，则加z-index）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="72-文字围绕浮动元素"><a class="markdownIt-Anchor" href="#72-文字围绕浮动元素"></a> 7.2 文字围绕浮动元素</h4><p>利用浮动元素不会压住文字的 特性</p><h4 id="73-行内块巧妙运用"><a class="markdownIt-Anchor" href="#73-行内块巧妙运用"></a> 7.3 行内块巧妙运用</h4><p><strong>页码在页面中间显示</strong></p><ol><li>把这些链接盒子转换为行内块， 之后给父级指定 text-align:center;</li><li>利用行内块元素中间有缝隙，并且给父级添加 text-align:center; 行内块元素会水平会居中</li></ol><h4 id="74-css-三角强化"><a class="markdownIt-Anchor" href="#74-css-三角强化"></a> 7.4 CSS 三角强化</h4><p><strong>原理：</strong></p><p><img src="https://i.loli.net/2021/07/21/a4Hl6MDkuA72wVp.png" alt="1571523024087.png" /></p><p><strong>代码：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 只保留右边的边框有颜色 */</span></span><br><span class="line">    <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;            </span><br><span class="line">    <span class="comment">/* 左边和下边的边框宽度设置为0，上边框调大 */</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="741-示例"><a class="markdownIt-Anchor" href="#741-示例"></a> 7.4.1 示例</h4><img src="https://i.loli.net/2021/07/21/sgLRzUrI3M8mWVc.png" alt="1571548099631.png" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">        width: 160px;</span><br><span class="line">        height: 24px;</span><br><span class="line">        line-height: 24px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> <span class="selector-class">.discount</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 90px;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background-color: red;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        font-weight: 700;</span><br><span class="line">        margin-right: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> <span class="selector-class">.discount</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        width: 0;</span><br><span class="line">        height: 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-id">#fff</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        border-style: solid;</span><br><span class="line">        border-width: 24px 12px 0 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.price</span> <span class="selector-class">.origin</span> &#123;</span></span><br><span class="line">        font-size: 12px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        text-decoration: line-through;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"discount"</span>&gt;</span></span><br><span class="line">            ￥1650 <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"origin"</span>&gt;</span>￥5650<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-css-初始化"><a class="markdownIt-Anchor" href="#8-css-初始化"></a> 8. CSS 初始化</h3><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼 容，我们需要对CSS 初始化</p><p><strong>例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把所有内外边距清零 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去掉li的小圆点 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 取消图片底侧有空白缝隙的问题 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Unicode编码字体</strong></p><p>把中文字体的名称用相应的Unicode编码来代替，这样就可以有效的避免浏览器解释CSS代码时候出现乱码的问题。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: ' \9ED1\4F53', '\5B8B\4F53', '\5FAE\8F6F\96C5\9ED1'</span><br></pre></td></tr></table></figure><ul><li>黑体 \9ED1\4F53</li><li>宋体 \5B8B\4F53</li><li>微软雅黑 \5FAE\8F6F\96C5\9ED1</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css高级技巧&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css高级技巧&quot;&gt;&lt;/a&gt; CSS高级技巧&lt;/h2&gt;
&lt;h3 id=&quot;1-精灵图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-精灵图&quot;&gt;&lt;/a&gt; 1. 精灵图&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>3 CSS CSS定位、元素显示与隐藏</title>
    <link href="http://yoursite.com/2021/07/18/%E5%89%8D%E7%AB%AF/3%20CSS%E5%AE%9A%E4%BD%8D/"/>
    <id>http://yoursite.com/2021/07/18/%E5%89%8D%E7%AB%AF/3%20CSS%E5%AE%9A%E4%BD%8D/</id>
    <published>2021-07-17T16:00:00.000Z</published>
    <updated>2021-08-29T10:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="css定位-元素显示与隐藏"><a class="markdownIt-Anchor" href="#css定位-元素显示与隐藏"></a> CSS定位、元素显示与隐藏</h2><h3 id="1-定位"><a class="markdownIt-Anchor" href="#1-定位"></a> 1. 定位</h3><a id="more"></a><p>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</p><p>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中的某个位置，并且可以压住其他盒子</p><p>定位 = 定位模式 + 边偏移</p><h4 id="11-定位模式"><a class="markdownIt-Anchor" href="#11-定位模式"></a> 1.1 定位模式</h4><p>定位模式决定元素的定位方式，它通过position的属性来设置</p><p><img src="https://i.loli.net/2021/07/21/VGwRP8oi7qaLUdj.png" alt="image-20210715151138669.png" /></p><h4 id="12-边偏移"><a class="markdownIt-Anchor" href="#12-边偏移"></a> 1.2 边偏移</h4><p>边偏移就是定位的盒子移动到最终位置，有top、right、bottom和left四个属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">top</span>: 80<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="13-静态定位static"><a class="markdownIt-Anchor" href="#13-静态定位static"></a> 1.3 静态定位static</h4><p>元素的默认定位方式，无定位</p><ul><li>按照标准流特性摆放位置，没有边偏移</li></ul><h4 id="14-相对定位"><a class="markdownIt-Anchor" href="#14-相对定位"></a> 1.4 相对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><ol><li><p>它是相对于自己原来的位置来移动的。</p></li><li><p>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（停职留薪）</p></li><li><p>相对定位并没有脱标，它最典型的应用是给绝对定位当爹。</p></li></ol><h4 id="15-绝对定位"><a class="markdownIt-Anchor" href="#15-绝对定位"></a> 1.5 绝对定位</h4><p>绝对定位是元素在移动位置的时候，相对于它祖先元素来说的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br></pre></td></tr></table></figure><ol><li>如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位。</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</li><li>绝对定位不再占有原先的位置。（脱标）</li></ol><h4 id="16-固定定位"><a class="markdownIt-Anchor" href="#16-固定定位"></a> 1.6 固定定位</h4><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure><ol><li><p>以浏览器的可视窗口为参照点移动元素。</p><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li><p>固定定位不再占有原先的位置</p><p>固定定位也是脱标的，可以看作是一种特殊的绝对定位</p></li></ol><p><strong>固定定位小技巧：固定在版心右侧</strong></p><ol><li>让固定定位的盒子 left: 50%. 走到浏览器可视区（也可以看做版心） 的一半位置。</li><li>让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走 版心宽度的一半位置。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">margin-left</span>: 410<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="17-粘性定位"><a class="markdownIt-Anchor" href="#17-粘性定位"></a> 1.7 粘性定位</h4><p>粘性定位可以被认为是相对定位和固定定位的混合。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>; <span class="selector-tag">top</span>: 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><ol><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom 其中一个才有效</li></ol><p>IE不兼容</p><h4 id="18-定位叠放次序"><a class="markdownIt-Anchor" href="#18-定位叠放次序"></a> 1.8 定位叠放次序</h4><p>在使用定位布局时，可能会出现盒子重叠的情况，用z-index来控制盒子的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">z-index</span>: 1;</span><br></pre></td></tr></table></figure><ul><li><p>数值越大，盒子越靠上</p></li><li><p>属性值相同，则按照书写顺序，后来居上</p></li><li><p>只有定位的盒子才有z-index属性</p></li></ul><h4 id="19-定位的拓展"><a class="markdownIt-Anchor" href="#19-定位的拓展"></a> 1.9 定位的拓展</h4><h5 id="191-绝对定位的盒子居中"><a class="markdownIt-Anchor" href="#191-绝对定位的盒子居中"></a> 1.9.1 绝对定位的盒子居中</h5><p>加了绝对定位的盒子不能通过<css>margin: 0 auto</css>水平居中</p><ol><li>让盒子的左侧移动到父级元素的水平中心位置。</li><li>让盒子向左移动自身宽度的一半。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 50%:</span><br><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-100px</span>;</span><br></pre></td></tr></table></figure><h5 id="192-定位特殊特性"><a class="markdownIt-Anchor" href="#192-定位特殊特性"></a> 1.9.2 定位特殊特性</h5><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ol><h5 id="193-脱标的盒子不会触发外边距塌陷"><a class="markdownIt-Anchor" href="#193-脱标的盒子不会触发外边距塌陷"></a> 1.9.3 脱标的盒子不会触发外边距塌陷</h5><p>浮动元素、绝对定位（固定定位）元素都不会触发外边距合并的问题。</p><h5 id="194-绝对定位固定定位会完全压住盒子"><a class="markdownIt-Anchor" href="#194-绝对定位固定定位会完全压住盒子"></a> 1.9.4 绝对定位（固定定位）会完全压住盒子</h5><p>浮动元素只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字。</p><p>绝对定位（固定定位） 会压住下面标准流所有的内容，包含文字。</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素。</p><h5 id="195-边偏移重叠"><a class="markdownIt-Anchor" href="#195-边偏移重叠"></a> 1.9.5 边偏移重叠</h5><p>如果一个盒子既有left属性也有right属性，则默认会执行left属性，top、bottom同理</p><h3 id="2-网页布局总结"><a class="markdownIt-Anchor" href="#2-网页布局总结"></a> 2. 网页布局总结</h3><ol><li><p>标准流</p><p>可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。</p></li><li><p>浮动</p><p>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。</p></li><li><p>定位</p><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就 用定位布局。</p></li></ol><h3 id="3-元素的显示与隐藏"><a class="markdownIt-Anchor" href="#3-元素的显示与隐藏"></a> 3. 元素的显示与隐藏</h3><p>让一个元素在页面中隐藏或者显示出来</p><h4 id="31-display属性"><a class="markdownIt-Anchor" href="#31-display属性"></a> 3.1 display属性</h4><p>display属性用于设置一个元素应如何显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>display: none；隐藏对象</li><li>display: block;       显示元素</li></ul><p>display隐藏元素后，不再占有原来的位置。</p><h4 id="32-visibility-可见性"><a class="markdownIt-Anchor" href="#32-visibility-可见性"></a> 3.2 visibility 可见性</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visibiliity: visible || hidden;</span><br></pre></td></tr></table></figure><ul><li>visibility: visible；元素可视</li><li>visibility: hidden;      元素隐藏</li></ul><p>visibility隐藏元素后，继续占有原来的位置。</p><h4 id="33-overflow溢出"><a class="markdownIt-Anchor" href="#33-overflow溢出"></a> 3.3 overflow溢出</h4><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/r4sbTPmLVjoUIK6.png" alt="image-20210716103943915.png" /></p><p>如果有定位的盒子，需要慎用overflow，因为它会隐藏多余的部分。</p><h4 id="34-总结"><a class="markdownIt-Anchor" href="#34-总结"></a> 3.4 总结</h4><ol><li>display 显示隐藏元素 但是不保留位置</li><li>visibility 显示隐藏元素 但是保留原来的位置</li><li>overflow 溢出显示隐藏 但是只是对于溢出的部分处理</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css定位-元素显示与隐藏&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css定位-元素显示与隐藏&quot;&gt;&lt;/a&gt; CSS定位、元素显示与隐藏&lt;/h2&gt;
&lt;h3 id=&quot;1-定位&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-定位&quot;&gt;&lt;/a&gt; 1. 定位&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>2 CSS 特性、盒子模型、浮动</title>
    <link href="http://yoursite.com/2021/07/17/%E5%89%8D%E7%AB%AF/2%20CSS%E7%89%B9%E6%80%A7%E3%80%81%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E3%80%81%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2021/07/17/%E5%89%8D%E7%AB%AF/2%20CSS%E7%89%B9%E6%80%A7%E3%80%81%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E3%80%81%E6%B5%AE%E5%8A%A8/</id>
    <published>2021-07-16T16:00:00.000Z</published>
    <updated>2021-08-29T10:57:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="css-特性-盒子模型-浮动"><a class="markdownIt-Anchor" href="#css-特性-盒子模型-浮动"></a> CSS 特性、盒子模型、浮动</h2><h3 id="1-css-特性"><a class="markdownIt-Anchor" href="#1-css-特性"></a> 1. CSS 特性</h3><a id="more"></a><p>CSS三大特性：层叠性、继承性、优先级</p><h4 id="11-层叠性"><a class="markdownIt-Anchor" href="#11-层叠性"></a> 1.1 层叠性</h4><p><strong>层叠性原则</strong></p><ul><li>样式冲突，遵循<font color="red">就近原则</font>，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h4 id="12-继承性"><a class="markdownIt-Anchor" href="#12-继承性"></a> 1.2 继承性</h4><p>子标签会继承父标签的某些样式，如文本颜色和字号。</p><p><strong>行高的继承性</strong></p><p>行高为当前子元素大小的1.5倍</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: 12px/1.5 'Microsoft YaHei';</span><br></pre></td></tr></table></figure><h4 id="13-优先级"><a class="markdownIt-Anchor" href="#13-优先级"></a> 1.3 优先级</h4><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据<font color="red">选择器权重执行</font></li></ul><p><img src="https://i.loli.net/2021/07/21/t6ZYDoxUKdMFeqN.png" alt="1571490129794.png" /></p><p><strong>继承的权重是0</strong>，不管父元素权重多高，子元素的权重都是0</p><h5 id="131-复合选择器的优先级"><a class="markdownIt-Anchor" href="#131-复合选择器的优先级"></a> 1.3.1 复合选择器的优先级</h5><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p><ul><li>div ul li → 0, 0, 3</li><li>.nav ul li → 0, 1, 2</li><li>a:hover → 0, 1, 1</li><li>.nav a → 0, 1, 1</li></ul><h3 id="2-盒子模型"><a class="markdownIt-Anchor" href="#2-盒子模型"></a> 2. 盒子模型</h3><p>边框border、外边距margin、内边距padding、实际内容content</p><img src="https://i.loli.net/2021/07/21/41uKBLPczAXhQqi.png" alt="1571492529986.png" style="zoom:80%;" /><h4 id="21-border"><a class="markdownIt-Anchor" href="#21-border"></a> 2.1 border</h4><p>边框由三部分组成：边框宽度、边框样式、边框颜色</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border: border-width || border-style || border-color</span><br></pre></td></tr></table></figure><ul><li>无顺序</li><li>边框宽度会影响盒子宽度</li></ul><h5 id="211-border-collapse"><a class="markdownIt-Anchor" href="#211-border-collapse"></a> 2.1.1 border-collapse</h5><p>合并边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span>;</span><br></pre></td></tr></table></figure><h4 id="22-内边距"><a class="markdownIt-Anchor" href="#22-内边距"></a> 2.2 内边距</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: 5<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/h23AvciRkGUtSlp.png" alt="1571493298248.png" /></p><ul><li><p>padding会影响盒子大小</p></li><li><p>用width和height减去padding的值</p></li><li><p>不用width、height的话不会撑大盒子</p></li></ul><h4 id="23-外边距"><a class="markdownIt-Anchor" href="#23-外边距"></a> 2.3 外边距</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><h5 id="231-块级盒子水平居中"><a class="markdownIt-Anchor" href="#231-块级盒子水平居中"></a> 2.3.1 块级盒子水平居中</h5><ul><li>盒子必须指定宽度</li><li>左右外边距设为auto</li></ul><h5 id="232-行内元素水平居中"><a class="markdownIt-Anchor" href="#232-行内元素水平居中"></a> 2.3.2 行内元素水平居中</h5><ul><li>给父元素添加text-align: center</li></ul><h5 id="233-垂直外边距合并"><a class="markdownIt-Anchor" href="#233-垂直外边距合并"></a> 2.3.3 垂直外边距合并</h5><p><strong>相邻块元素垂直外边距的合并</strong></p><p><img src="https://i.loli.net/2021/07/21/UYDV2jCgIKhpsNb.png" alt="1571494239103.png" /></p><p><strong>嵌套块元素垂直外边距的塌陷</strong></p><p><img src="https://i.loli.net/2021/07/21/n4Mu8cLg61A7ZxE.png" alt="1571494373778.png" /></p><ul><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加overflow:hidden</li></ul><p><strong>清除内外边距</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行内元素尽量只设置左右的内外边距</li></ul><h4 id="24-圆角边框"><a class="markdownIt-Anchor" href="#24-圆角边框"></a> 2.4 圆角边框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="25-盒子阴影"><a class="markdownIt-Anchor" href="#25-盒子阴影"></a> 2.5 盒子阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/1IkehlaAvNYcR3V.png" alt="1571541874805.png" /></p><ul><li><p>默认为outset，不用写</p></li><li><p>阴影不占用空间</p></li></ul><h4 id="26-文字阴影"><a class="markdownIt-Anchor" href="#26-文字阴影"></a> 2.6 文字阴影</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/8vVUThxKawdGioW.png" alt="1571541954222.png" /></p><h3 id="3-浮动"><a class="markdownIt-Anchor" href="#3-浮动"></a> 3. 浮动</h3><p><strong>float</strong>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: none || left || right;</span><br></pre></td></tr></table></figure><h4 id="31-浮动特性"><a class="markdownIt-Anchor" href="#31-浮动特性"></a> 3.1 浮动特性</h4><ol><li><p>脱离标准流的控制移动到指定位置（<strong>脱标</strong>）</p></li><li><p>浮动的盒子<strong>不再保留原先的位置</strong></p></li><li><p>浮动元素具有行内块元素特性</p><p>任何元素都可以浮动</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨在一起的</li><li>行内元素同理</li></ul></li></ol><h4 id="32-浮动元素经常和标准流父级搭配使用"><a class="markdownIt-Anchor" href="#32-浮动元素经常和标准流父级搭配使用"></a> 3.2 浮动元素经常和标准流父级搭配使用</h4><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-常见网页布局"><a class="markdownIt-Anchor" href="#4-常见网页布局"></a> 4. 常见网页布局</h3><h4 id="41-常见网页布局"><a class="markdownIt-Anchor" href="#41-常见网页布局"></a> 4.1 常见网页布局</h4><p><img src="https://i.loli.net/2021/07/21/QHBEfoTRlMA158d.png" alt="1571555421784.png" style="zoom:50%;" />  <img src="https://i.loli.net/2021/07/21/5fPXmqvE8VHrRT2.png" alt="1571555492364.png" style="zoom:50%;" /></p><img src="https://i.loli.net/2021/07/21/HULhF9J4SqzoVQP.png" alt="image-20210713172158796.png" style="zoom:80%;" /><h4 id="42-浮动布局注意点"><a class="markdownIt-Anchor" href="#42-浮动布局注意点"></a> 4.2 浮动布局注意点</h4><ol><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</li></ol><h4 id="43-清除浮动"><a class="markdownIt-Anchor" href="#43-清除浮动"></a> 4.3 清除浮动</h4><p><img src="https://i.loli.net/2021/07/21/4wPetuXLW9gSpO7.png" alt="1571555883628.png" /></p><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear: left || right || both;</span><br></pre></td></tr></table></figure><p><strong>清除浮动的策略</strong></p><p>闭合浮动：只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子</p><h5 id="431-额外标签法隔墙法"><a class="markdownIt-Anchor" href="#431-额外标签法隔墙法"></a> 4.3.1 额外标签法（隔墙法）</h5><p>在浮动元素末尾添加一个空的标签，必须是块级元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="432-父级添加overflow属性"><a class="markdownIt-Anchor" href="#432-父级添加overflow属性"></a> 4.3.2 父级添加overflow属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：代码简洁</p><p>缺点：无法显示溢出的部分</p><h5 id="433-父级添加after伪元素"><a class="markdownIt-Anchor" href="#433-父级添加after伪元素"></a> 4.3.3 父级添加after伪元素</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;<span class="comment">/* IE6、7专有 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：没有增加标签，结构更简单</p><h5 id="434-父级添加双伪元素"><a class="markdownIt-Anchor" href="#434-父级添加双伪元素"></a> 4.3.4 父级添加双伪元素</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::bofore</span>, </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;<span class="comment">/* IE6、7专有 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：代码更简洁</p><h4 id="44-清除浮动总结"><a class="markdownIt-Anchor" href="#44-清除浮动总结"></a> 4.4 清除浮动总结</h4><p><strong>为什么需要清除浮动</strong></p><p>① 父级没高度</p><p>② 子盒子浮动了</p><p>③ 影响下面布局了</p><h3 id="5-css属性书写顺序"><a class="markdownIt-Anchor" href="#5-css属性书写顺序"></a> 5. CSS属性书写顺序</h3><ol><li>布局定位属性：display / position / float / clear / visibility / overflow</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li><li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li></ol><h4 id="52-页面布局分析"><a class="markdownIt-Anchor" href="#52-页面布局分析"></a> 5.2 页面布局分析</h4><p>为了提高网页制作的效率，布局时通常有以下的布局流程：</p><ol><li><p>必须确定页面的版心（可视区），我们测量可得知。</p></li><li><p>分析页面中的行模块，以及每个行模块中的列模块。其实页面布局，就是一行行罗列而成的。</p></li><li><p>制作 HTML 结构。我们还是遵循，先有结构，后有样式的原则。结构永远最重要。</p></li><li><p>开始运用盒子模型的原理，通过 DIV+CSS 布局来控制网页的各个模块。</p></li></ol><h4 id="53-注意事项"><a class="markdownIt-Anchor" href="#53-注意事项"></a> 5.3 注意事项</h4><h5 id="531-导航栏"><a class="markdownIt-Anchor" href="#531-导航栏"></a> 5.3.1 导航栏</h5><p>实际开发中，我们不会直接用链接a而是用li包含链接a的做法</p><ul><li>li + a语义更清晰</li><li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑，从而影响网站排名</li></ul><p><strong>注意</strong></p><p>1.让导航栏一行显示, 给 li 加浮动, 因为 li 是块级元素, 需要一行显示.</p><p>2.这个nav导航栏可以不给宽度,将来可以继续添加其余文字</p><p>3.因为导航栏里面文字不一样多,所以最好给链接 a 左右padding 撑开盒子,而不是指定宽度</p><h5 id="532-浮动"><a class="markdownIt-Anchor" href="#532-浮动"></a> 5.3.2 浮动</h5><p>浮动的盒子不会有外边距合并</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css-特性-盒子模型-浮动&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css-特性-盒子模型-浮动&quot;&gt;&lt;/a&gt; CSS 特性、盒子模型、浮动&lt;/h2&gt;
&lt;h3 id=&quot;1-css-特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-css-特性&quot;&gt;&lt;/a&gt; 1. CSS 特性&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>1 CSS 基础、文本、显示模式、背景</title>
    <link href="http://yoursite.com/2021/07/16/%E5%89%8D%E7%AB%AF/1%20CSS%20%E5%9F%BA%E7%A1%80%E3%80%81%E6%96%87%E6%9C%AC%E3%80%81%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F%E3%80%81%E8%83%8C%E6%99%AF/"/>
    <id>http://yoursite.com/2021/07/16/%E5%89%8D%E7%AB%AF/1%20CSS%20%E5%9F%BA%E7%A1%80%E3%80%81%E6%96%87%E6%9C%AC%E3%80%81%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F%E3%80%81%E8%83%8C%E6%99%AF/</id>
    <published>2021-07-15T16:00:00.000Z</published>
    <updated>2021-08-29T10:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="css-基础-文本-显示模式-背景"><a class="markdownIt-Anchor" href="#css-基础-文本-显示模式-背景"></a> CSS 基础、文本、显示模式、背景</h2><h3 id="1-语法规范"><a class="markdownIt-Anchor" href="#1-语法规范"></a> 1. 语法规范</h3><a id="more"></a><p>选择器+声明</p><h3 id="2-基础选择器"><a class="markdownIt-Anchor" href="#2-基础选择器"></a> 2. 基础选择器</h3><h4 id="标签选择器"><a class="markdownIt-Anchor" href="#标签选择器"></a> 标签选择器</h4><p>html标签</p><h4 id="类选择器"><a class="markdownIt-Anchor" href="#类选择器"></a> 类选择器</h4><ul><li><p>class属性中可以写多个类名，用空格隔开</p></li><li><p>标签可以调用公共的类，再调用自己独有的类</p></li></ul><h4 id="id选择器"><a class="markdownIt-Anchor" href="#id选择器"></a> id选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#id</span> &#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通配符选择器"><a class="markdownIt-Anchor" href="#通配符选择器"></a> 通配符选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-字体属性"><a class="markdownIt-Anchor" href="#3-字体属性"></a> 3. 字体属性</h3><h4 id="31-字体系列"><a class="markdownIt-Anchor" href="#31-字体系列"></a> 3.1 字体系列</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: 'Microsoft Yahei';</span><br></pre></td></tr></table></figure><ul><li>各字体之间用逗号隔开</li><li>可以有多个字体，系统按顺序选择</li></ul><h4 id="32-字体大小"><a class="markdownIt-Anchor" href="#32-字体大小"></a> 3.2 字体大小</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: 20px;</span><br></pre></td></tr></table></figure><h4 id="33-字体粗细"><a class="markdownIt-Anchor" href="#33-字体粗细"></a> 3.3 字体粗细</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-weight</span>: 400;</span><br></pre></td></tr></table></figure><h4 id="34-文字样式"><a class="markdownIt-Anchor" href="#34-文字样式"></a> 3.4 文字样式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-style: normal/italic;</span><br></pre></td></tr></table></figure><h4 id="35-字体复合属性"><a class="markdownIt-Anchor" href="#35-字体复合属性"></a> 3.5 字体复合属性</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font: font-style font-weight font-size/line-height font-family;</span><br></pre></td></tr></table></figure><ul><li>必须保留font-size和font-family</li></ul><h3 id="4-文本属性"><a class="markdownIt-Anchor" href="#4-文本属性"></a> 4. 文本属性</h3><h4 id="41-文本颜色color"><a class="markdownIt-Anchor" href="#41-文本颜色color"></a> 4.1 文本颜色color</h4><ul><li>预定义的值</li><li>十六进制</li><li>RGB代码</li></ul><h4 id="42-文本对齐text-align"><a class="markdownIt-Anchor" href="#42-文本对齐text-align"></a> 4.2 文本对齐text-align</h4><p>让盒子内的元素水平对齐</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align: left/center/right;</span><br></pre></td></tr></table></figure><h4 id="43-文本装饰text-decoration"><a class="markdownIt-Anchor" href="#43-文本装饰text-decoration"></a> 4.3 文本装饰text-decoration</h4><p>none/underline/overline/line-through</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br></pre></td></tr></table></figure><h4 id="44-文本缩进text-indent"><a class="markdownIt-Anchor" href="#44-文本缩进text-indent"></a> 4.4 文本缩进text-indent</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-indent: 10px/2em;</span><br></pre></td></tr></table></figure><h4 id="45-line-height"><a class="markdownIt-Anchor" href="#45-line-height"></a> 4.5 line-height</h4><p>行间距 = 上间距 + 文本高度 + 下间距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">line-height</span>: 26<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h3 id="5-css引入方式"><a class="markdownIt-Anchor" href="#5-css引入方式"></a> 5. CSS引入方式</h3><h4 id="51-行内样式表"><a class="markdownIt-Anchor" href="#51-行内样式表"></a> 5.1 行内样式表</h4><p>写在行内</p><h4 id="52-内部样式表"><a class="markdownIt-Anchor" href="#52-内部样式表"></a> 5.2 内部样式表</h4><p>style理论上可以放在HTML的任何地方，但一般会放在head标签中</p><h4 id="53-外部样式表"><a class="markdownIt-Anchor" href="#53-外部样式表"></a> 5.3 外部样式表</h4><p>样式单独写到CSS文件中，把CSS文件引入到HTML页面中使用</p><p>通过&lt;link&gt;标签引入文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css文件路径"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-emmet语法"><a class="markdownIt-Anchor" href="#6-emmet语法"></a> 6. Emmet语法</h3><h4 id="61-快速生成html标签"><a class="markdownIt-Anchor" href="#61-快速生成html标签"></a> 6.1 快速生成html标签</h4><ul><li><p>div + tab</p></li><li><p>生成多个相同标签：div * 3</p></li><li><p>父子关系： ul &gt; li * 3</p></li><li><p>兄弟关系：div + p</p></li><li><p>带有类名或id： div.demo、p#two</p></li><li><p>生成带有顺序的类名：div.demo$*5</p></li><li><p>在生成的标签内部写内容可以用{}表示</p></li></ul><h4 id="62-快速生成css样式"><a class="markdownIt-Anchor" href="#62-快速生成css样式"></a> 6.2 快速生成css样式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tac = text-align: center;</span><br><span class="line">ti2em = text-indent: 2em;</span><br><span class="line">w100 = width: 100px;</span><br></pre></td></tr></table></figure><h3 id="7-css复合选择器"><a class="markdownIt-Anchor" href="#7-css复合选择器"></a> 7. CSS复合选择器</h3><p>复合选择器是基础选择器的组合，常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等</p><h4 id="71-后代选择器"><a class="markdownIt-Anchor" href="#71-后代选择器"></a> 7.1 后代选择器</h4><p>选择父元素里面子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="72-子选择器"><a class="markdownIt-Anchor" href="#72-子选择器"></a> 7.2 子选择器</h4><p>只能选择最近的一级子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span>&gt;<span class="selector-tag">li</span></span><br></pre></td></tr></table></figure><h4 id="73-并集选择器"><a class="markdownIt-Anchor" href="#73-并集选择器"></a> 7.3 并集选择器</h4><p>选择多组标签，同时为它们定义相同的样式，任何形式的选择器都可以作为并集选择器的一部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="74-伪类选择器"><a class="markdownIt-Anchor" href="#74-伪类选择器"></a> 7.4 伪类选择器</h4><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素。</p><p>伪类选择器用 <strong>:</strong> 表示</p><h5 id="741-链接伪类选择器"><a class="markdownIt-Anchor" href="#741-链接伪类选择器"></a> 7.4.1 链接伪类选择器</h5><ul><li>a:link  没有点击过的(访问过的)链接</li><li>a:visited 点击过的(访问过的)链接</li><li>a:hover  鼠标经过的那个链接</li><li>a:active  鼠标正在按下还没有弹起鼠标的那个链接</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>需要按照l、v、h、a的顺序来写</p></li><li><p>a链接在浏览器中具有默认样式，所以需要单独指定样式</p></li></ul><h5 id="742-focus伪类选择器"><a class="markdownIt-Anchor" href="#742-focus伪类选择器"></a> 7.4.2 focus伪类选择器</h5><p>用于选取获得焦点的表单元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="75-总结"><a class="markdownIt-Anchor" href="#75-总结"></a> 7.5 总结</h4><p><img src="https://i.loli.net/2021/07/21/buyrw5WPsUQ1TMj.png" alt="1570868930472.png" /></p><h4 id="8-元素显示模式"><a class="markdownIt-Anchor" href="#8-元素显示模式"></a> 8. 元素显示模式</h4><h4 id="81-块元素"><a class="markdownIt-Anchor" href="#81-块元素"></a> 8.1  块元素</h4><p>div、p……</p><ul><li>可以设置w、h、margin</li></ul><p><strong>注意</strong></p><ul><li>文字类的元素不能使用块级元素（p中不能放div）</li></ul><h4 id="82-行内元素"><a class="markdownIt-Anchor" href="#82-行内元素"></a> 8.2 行内元素</h4><p>a、span……</p><ul><li>w、h设置无效</li><li>默认宽度就是本身内容宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ul><p><strong>注意</strong></p><ul><li>链接里面不能再放链接</li></ul><h4 id="83-行内块元素"><a class="markdownIt-Anchor" href="#83-行内块元素"></a> 8.3 行内块元素</h4><p>一行可以放多个，且可以设置w、h（input）</p><h4 id="84-元素显示模式转换"><a class="markdownIt-Anchor" href="#84-元素显示模式转换"></a> 8.4 元素显示模式转换</h4><p>一个模式的元素需要另外一种模式的特性（增加&lt;a&gt;的触发范围）</p><p><strong>行内转块</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 150<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 50<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br></pre></td></tr></table></figure><p><strong>块转行</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline</span>;</span><br></pre></td></tr></table></figure><p><strong>转换为行内块</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br></pre></td></tr></table></figure><h3 id="9-背景"><a class="markdownIt-Anchor" href="#9-背景"></a> 9. 背景</h3><h4 id="91-背景颜色"><a class="markdownIt-Anchor" href="#91-背景颜色"></a> 9.1 背景颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">pink</span>;</span><br></pre></td></tr></table></figure><h4 id="92-背景图片"><a class="markdownIt-Anchor" href="#92-背景图片"></a> 9.2 背景图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>();</span><br></pre></td></tr></table></figure><h4 id="93-背景平铺"><a class="markdownIt-Anchor" href="#93-背景平铺"></a> 9.3 背景平铺</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat:repeat | norepeat | repeat-x;</span><br></pre></td></tr></table></figure><h4 id="94-背景图片位置"><a class="markdownIt-Anchor" href="#94-背景图片位置"></a> 9.4 背景图片位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">x</span> <span class="selector-tag">y</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/Gqr4JpAeHalkWiw.png" alt="1570887034135.png" /></p><ul><li>如果指定的两个值都是方位名词，则前后顺序无关</li><li>如果只指定了一个方位名词，则另一个默认center</li></ul><p><strong>精确单位</strong></p><ul><li>第一个肯定是x，第二个肯定是y</li></ul><h4 id="95-背景固定背景附着"><a class="markdownIt-Anchor" href="#95-背景固定背景附着"></a> 9.5 背景固定（背景附着）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment: scroll | fixed</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/2fyuIFax9GXYv7j.png" alt="1570887699177.png" /></p><h4 id="96-背景复合写法"><a class="markdownIt-Anchor" href="#96-背景复合写法"></a> 9.6 背景复合写法</h4><p>背景颜色、背景图片地址、背景平铺、背景图像滚动、背景图片位置</p><ul><li>没有顺序要求</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</span><br></pre></td></tr></table></figure><h4 id="97-背景色半透明"><a class="markdownIt-Anchor" href="#97-背景色半透明"></a> 9.7 背景色半透明</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure><h4 id="98-背景总结"><a class="markdownIt-Anchor" href="#98-背景总结"></a> 9.8 背景总结</h4><p><img src="https://i.loli.net/2021/07/21/o7yYjeVBuMxag4J.png" alt="1570888283511.png" /></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css-基础-文本-显示模式-背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css-基础-文本-显示模式-背景&quot;&gt;&lt;/a&gt; CSS 基础、文本、显示模式、背景&lt;/h2&gt;
&lt;h3 id=&quot;1-语法规范&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-语法规范&quot;&gt;&lt;/a&gt; 1. 语法规范&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>2 HTML常用标签</title>
    <link href="http://yoursite.com/2021/07/15/%E5%89%8D%E7%AB%AF/2%20HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2021/07/15/%E5%89%8D%E7%AB%AF/2%20HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</id>
    <published>2021-07-14T16:00:00.000Z</published>
    <updated>2021-08-29T10:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="html常用标签"><a class="markdownIt-Anchor" href="#html常用标签"></a> HTML常用标签</h2><h3 id="1-段落和换行"><a class="markdownIt-Anchor" href="#1-段落和换行"></a> 1. 段落和换行</h3><a id="more"></a><ul><li><p>p：段落标签</p></li><li><p>br：换行标签</p></li></ul><h3 id="2-文本格式化标签"><a class="markdownIt-Anchor" href="#2-文本格式化标签"></a> 2. 文本格式化标签</h3><ul><li><p>strong或b：加粗</p></li><li><p>em或i：倾斜t</p></li><li><p>del或s：删除线</p></li><li><p>ins或u：下划线</p></li></ul><h3 id="3-div和span标签"><a class="markdownIt-Anchor" href="#3-div和span标签"></a> 3. &lt;div&gt;和&lt;span&gt;标签</h3><p>用来装内容的盒子，无语义</p><p><strong>特点</strong></p><ul><li>div一行只能放一个，大盒子。</li><li>span一行上可以多个，小盒子。</li></ul><h3 id="4-image标签"><a class="markdownIt-Anchor" href="#4-image标签"></a> 4. image标签</h3><p><img src="https://i.loli.net/2021/07/21/vdHcM21f7qaEz8n.png" alt="图片属性.png" /></p><h4 id="5-相对路径与绝对路径"><a class="markdownIt-Anchor" href="#5-相对路径与绝对路径"></a> 5. 相对路径与绝对路径</h4><p><img src="https://i.loli.net/2021/07/21/NAHObQGc7qXs2zx.png" alt="路径.png" /></p><p><strong>绝对路径</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=“https://i0.hdslb.com/bfs/face/4a425d42e4e3829a07e4a1b0d16c97062b8a3c5b.jpg@160w_160h_1c.webp”</span><br></pre></td></tr></table></figure><h3 id="6-超链接标签"><a class="markdownIt-Anchor" href="#6-超链接标签"></a> 6. 超链接标签</h3><ul><li>a：超链接</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/AipuHNTxfh8WR1b.png" alt="image-20210706102901832.png" /></p><h4 id="链接分类"><a class="markdownIt-Anchor" href="#链接分类"></a> 链接分类</h4><ul><li><p>外部链接</p></li><li><p>内部链接</p></li><li><p>空链接：href=“#”</p></li><li><p>下载链接：地址链接的是文件</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href="img.zip"</span><br></pre></td></tr></table></figure><ul><li>网页元素的链接</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img.jpg"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>锚点链接</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">   h3</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-注释和特殊字符"><a class="markdownIt-Anchor" href="#7-注释和特殊字符"></a> 7. 注释和特殊字符</h3><p><strong>注释</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特殊字符</strong></p><p><img src="https://i.loli.net/2021/07/21/sduGSZzqaUMI3k8.png" alt="特殊字符.png" /></p><h3 id="8-表格标签"><a class="markdownIt-Anchor" href="#8-表格标签"></a> 8. 表格标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>&lt;/table&gt; 是用于定义表格的标签。</p></li><li><p>&lt;/tr&gt; 标签用于定义表格中的行，必须嵌套在 &lt;/table&gt;标签中。</p></li><li><p>&lt;/td&gt; 用于定义表格中的单元格，必须嵌套在&lt;/tr&gt;标签中。</p></li><li><p>字母 td 指表格数据（table data），即数据单元格的内容。</p></li><li><p>th：表头单元格，会加粗居中</p></li></ol><h4 id="表格属性"><a class="markdownIt-Anchor" href="#表格属性"></a> 表格属性</h4><p><img src="https://i.loli.net/2021/07/21/GK3iaqusnjcl694.png" alt="表格属性.png" /></p><h4 id="表格结构标签"><a class="markdownIt-Anchor" href="#表格结构标签"></a> 表格结构标签</h4><ul><li>thead：表格的头部区域</li><li>tbody：表格的主体区域</li></ul><h4 id="合并单元格"><a class="markdownIt-Anchor" href="#合并单元格"></a> 合并单元格</h4><ul><li>rowspan：跨行合并，最上侧单元格作为目标单元格</li><li>colspan：跨列合并，最左侧单元格作为目标单元格</li></ul><p>找到目标单元格，写上合并方式，删除多余的单元格。</p><h3 id="9-列表标签"><a class="markdownIt-Anchor" href="#9-列表标签"></a> 9. 列表标签</h3><h4 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ul里只能放li，li里面可以用其他的标签</p><h4 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义列表"><a class="markdownIt-Anchor" href="#自定义列表"></a> 自定义列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>官方微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>dl用于定义列表</li><li>dt表示项目</li><li>dd表示名字</li></ul><h3 id="10-表单标签"><a class="markdownIt-Anchor" href="#10-表单标签"></a> 10. 表单标签</h3><p>由表单域、表单控件、提示信息组成</p><h4 id="表单域"><a class="markdownIt-Anchor" href="#表单域"></a> 表单域</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单域名称"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/MUQ4awtriW1eZKX.png" alt="表单常用属性.png" /></p><h4 id="表单控件"><a class="markdownIt-Anchor" href="#表单控件"></a> 表单控件</h4><h5 id="input输入表单元素"><a class="markdownIt-Anchor" href="#input输入表单元素"></a> input输入表单元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"属性值"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/21/AawbfjX3WGoFP72.png" alt="表单标签.png" /></p><ul><li>单标签</li></ul><p><img src="https://i.loli.net/2021/07/21/ZlC9F5fkotqI1xN.png" alt="表单其他属性.png" /></p><ul><li>多选1必须具有相同的name</li><li>value主要针对后台人员使用</li><li>checked针对按钮选择</li></ul><h5 id="label标签"><a class="markdownIt-Anchor" href="#label标签"></a> label标签</h5><p>label标签用于绑定一个表单元素，当点击label内文本时，会自动聚焦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>label标签的for属性应当与相关元素的id属性相同</li></ul><h5 id="select下拉表单元素"><a class="markdownIt-Anchor" href="#select下拉表单元素"></a> select下拉表单元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以在option中定义selected=“selected”</li></ul><h5 id="texarea文本域元素"><a class="markdownIt-Anchor" href="#texarea文本域元素"></a> texarea文本域元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html常用标签&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#html常用标签&quot;&gt;&lt;/a&gt; HTML常用标签&lt;/h2&gt;
&lt;h3 id=&quot;1-段落和换行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-段落和换行&quot;&gt;&lt;/a&gt; 1. 段落和换行&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>1 HTML基本结构标签</title>
    <link href="http://yoursite.com/2021/07/14/%E5%89%8D%E7%AB%AF/1%20HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2021/07/14/%E5%89%8D%E7%AB%AF/1%20HTML%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A0%87%E7%AD%BE/</id>
    <published>2021-07-13T16:00:00.000Z</published>
    <updated>2021-08-29T10:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="html基本结构标签"><a class="markdownIt-Anchor" href="#html基本结构标签"></a> HTML基本结构标签</h2><a id="more"></a><ul><li><p>!DOCTYPE是文档类型声明标签，用来标识版本为html5</p></li><li><p>lang=&quot;en&quot;表示语言为英文（中文为zh-CN）</p></li><li><p>BGK是国标，UTF-8也被称为万国码，基本包含了全世界所有国家需要用的字符</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html基本结构标签&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#html基本结构标签&quot;&gt;&lt;/a&gt; HTML基本结构标签&lt;/h2&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
